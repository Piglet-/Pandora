# Pandora

Pandora es un lenguaje imperativo de tipado fuerte y propósio general cuyo diseño está inspirado principalmente en los lenguajes Pascal y Ruby. Pandora es un lenguaje simplificado diseñado para los cursos de la cadena de Lenguajes de Programación de la USB, cuenta con recursión, iteración determinada e indeterminada, uniones, estructuras y bloques anidados.

## Consideraciones lexicográficas.

### Símbolos.

* `;` : Separador de instrucciones.
* `,` : Separador de argumentos o parámetros.
* `.` : Accede a los atributos.
* `:` : Declaración del tipo de una variable.
* `(` : Diversos usos.
* `)` : Diversos usos.
* `[` : Delimitador de arreglos.
* `]` : Delimitador de arreglos.


### Palabras reservadas.

#### Instrucciones.

* `if` : Inicio de la sentencia condicional.
* `then` : Instrucción then de la sentencia condicional.
* `else` : Instrucción else de la sentencia condicional.
* `while` : Inicio de la iteración indeterminada.
* `do` : Inicio del bloque de la iteración indeterminada.
* `for` : Inicio de la iteración determinada.
* `union` : Declaración de uniones.
* `like` : Declaración de uniones.
* `struct` : Declaración de estructuras.
* `has` : Declaración de estructuras.
* `return` : Retorna el valor de una función.
* `new` : Creación de un apuntador.
* `begin` : Inicio del programa principal.
* `end` : Fin del programa principal y de las estructuras.
* `def` : Decalaración de funciones.
* `free` : Liberación de un apuntador.
* `repeat`: Inicio de la iteración indeterminada.
* `read` : Lee del teclado y asigna a una variable.
* `write` : Escribe en la salida estándar.

#### Valores.

* `true` : Valor booleano.
* `false`: Valor booleano.
* `null` : Valor nulo.

#### Tipos.

* `int` : tipo de los números enteros.
* `bool` : tipo booleano.
* `float` : tipo de los números punto flotante.
* `char` : tipo de los caracteres.
* `array` : tipo de los arreglos.
* `void` : Tipo de datos vacío, retornado por los procedimientos.
* `struct` : Tipo de las estructuras.
* `union`: Tipo de las uniones.

#### Otros.

* `var` : Define el pasaje de parámetros por referencia.

### Identificadores.

Cualquier cadena de caracteres que comience por una letra minúscula (`a-z`) o un guión bajo (`_`) y es seguido por digítos (`0-9`), letras mayúsculas o minúsculas (`a-z,A-Z`) o un guión bajo (`_`), es considerado un identificador.

Ejemplos:

    foo
    _bar
    bAz_

### Comentarios.

* `--`: inicio de un comentario de línea.
* `-*-` : inicio y fin de un comentario multilínea.

Ejemplos:

` -- Esto es un comentario de línea`

    -*- 
        esto es
        un comentario
        multilínea 
    -*-


### Operadores.

#### Binarios.

* `=` : Asignación.
* `==` : Equivalencia.
* `/=` : Inequivalencia.
* `*` : Multiplicación algebraica.
* `+` : Suma algebraica.
* `-` : Resta algebraica.
* `/` : División algebraica.
* `^` : Potencia.
* `>` : Mayor que.
* `>=` : Mayor o igual que.
* `<` : Menor que.
* `<=` : Menor o igual que.
* `%` : Módulo.
* `and`: Conjunción lógica.
* `or`: Disyunción lógica.

#### Unarios.

* `not` : Negación lógica.
* `-` : Menos unario.

Ejemplos:

    foo : int;
    
    foo = 3^2;
    

    struct persona has
        nombre : string;
        apellido : string;
    end

    union fecha like
        enInt : int;
        enFloat : float;
        enString : string;
    end


## Gramática. (Por definir)

## Estructura del programa. (Por definir)

Un programa en Pandora tiene dos partes funtamentales:

* El programa principal: es el llamado cuando se inicia la ejecución del programa. Esta función esta delimitada por las palabras `begin`y `end`.
* Área de definiciones: en esta sección se definen todas las variables, estructuras y funciones que serán usadas por el programa principal.

## Alcance.

El alcance es la región del código donde la declaración de un elemento está activa, en Pandora el alcance es estático permitiendo anidamiento de bloques y variables solapadas.

## Tipos de datos.

### Tipos primitivos

Son los tipos de datos incluidos en la implementación del lenguaje.

* `int`
* `float`
* `bool`
* `char`

### Tipos compuestos

* `array` definen una asociación entre un tipo `int`y cualquiera de los tipos primitivos del lenguaje.

Los usuarios tienen la posibilidad de definir nuevos tipos de datos según les sea necesario.

* `struct`  define las estructuras cuyos elementos pueden ser usados simultáneamente con el operador de acceso '.'

* `union` define las estructuras llamadas uniones, cuyos elemntos no pueden ser utilizados de manera simultánea sino que únicamente se recuerda el elemento que ha sido asignado más recientemente.

## Variables.

Cualquier identificador declarado con cualquier tipo válido, bien sea primitivo o definido por el ususario, es considerado una variable. Las variables pueden ser locales o globales.

* Variables locales: Son las variables declaradas en el cuerpo de una función y aquellas pasadas como parámetros.

* Variables globales: Son las variables declaradas fuera de los alcances locales.

Pandora permite variables solapadas, es decir, si un identificador ya es asignado dentro del cuerpo de una función, el mismo identificador puede ser asignado dentro de un bloque anidado y es esta última la que tiene validez dentro del bloque más interno ocultando la primera asignación hasta que el bloque termine para luego restaurarla.

La noción de variables solapadas no aplica para los nombres de funciones ni tipos definidos por el usuario.


## Arreglos

Los arreglos en Pandora son multidimensionales de base 0, es decir, siempre comienzan en 0 hasta el número indicado en su declaración, el arreglo puede contener cualquiera de los tipos básicos definidos en Pandora.

Ejemplo:

        foo : array int[21][42]; 

Sintaxis:
        
        array <type>[<expr Int>] <variable>; 

Donde su longitud sería 22 desde 0 hasta 21.

Al pasarlos como parámetros de una función seran realizados por refencia 
(Un apuntador al primer elemento) cambiando los valores del arreglo pasado como parámetros **(Por Definir)**.

## Strings

El uso de Strings en Pandora es muy limitado, sólo se permiten usarlos para la facilidad de imprimirlos con la palabra reservada para imprimir del leguaje. Para tener un String, estos tendran que estar entre comillas dobles (\") en una sola linea, permite el uso de los carácteres especiales '\\n' '\\t' para poder representar los saltos de lineas y tabulaciones.

Ejemplo:

        write "Hola Mundo\n";

## Funciones **(Por Definir)**

Para la declaración de funciones se necesita usar la palabra reservada para la misma `def` seguido del nombre de la función y entre paréntesis los parametros necesarios, seguido del bloque de ejecución que debe terminar en un end.

Ejemplo: 

    def foo(a : int, b : int)
        print(a);
        print(b);
    end

Sintaxis: **(Falta)**

Para la invocación de funciones se necesita usar la variable asignada a la función con el número correcto de argumentos, dichos argumentos pueden ser de valor o de referencia. **(No se si se va a permitir funciones con argumentos multiples)**.

Ejemplo:

        foo(a,b);

Sintaxis: **(Falta)**

### Funciones de segunda clase **(Por definir)**.

## Procedimientos **(Por Definir)**

## Asignación

Para los tipos básicos del lenguaje se realiza una copia por valor, en el cual se copia el valor o resultado del lado derecho a la variable del lado izquierdo. Dicha variable debe haber sido declarada previamente y ambos lados de la asignación deben tener el mismo tipo.

Ejemplo:

        foo = 42;

## Estructuras de Control

### Condicional

Viene dado por el conocido `if then` o `if then else`.

Ejemplos:

        if nothing then
            a = something;
        end

        if baz == 42 then 
            bar = something;
        else
            foo = something
        end

Sintaxis:  **(Falta)**

**(Falta ver si se pondra elif entre las definiciones)**

### Case **(Por definir)**

### Iteración acotada (for).

La iteración acotada viene dado por el uso de for seguido de una variable y el rango en el cual se quiera usar.

Ejemplo:

        for (i ; 0 ; 12):
            bar = bar + i;
        end

Sintaxis: **(Falta)**

Nota: En el bloque del for no se puede usar la variable que se esta utilizando para la iteración

### Iteración indeterminada.

Existen 2 tipos de iteraciones indeterminadas en Pandora, el `while` y el `repeat`,
la primera evalúa una expresión booleana y de cumplirse ejecuta el bloque, 
el `repeat` primero evalúa el bloque y después evalúa la expresión booleana.

Ejemplo while:

        while foo < 42 do
            foo = foo + 1;
        end

Ejemplo repeat:
        
        repeat
            foo = foo + 1;
        until foo < 42;

Sintaxis: **(Falta)**

## Expresiones

Las expresiones consisten de constantes numéricas(int, float), constantes booleanas, variables y operadores, estos últimos contienen una precedencia el cual indican el orden en el cual deben ser realizadas las operaciones, dicho orden puede ser modificado con el uso de parentesis. Al usar varibles en una operación estas deben ser inicializadas con las reglas de alcance ya explicadas.

### Expresiones aritméticas

Las expresiones aritméticas consisten de constantes numéricas, llamadas a funciones, variables y operadores aritméticos. Los operadores aritméticos definidos en Pandora son: los binarios dados por la suma (+), la resta (-), la multiplicación (*), la división entera (/) y el módulo (%). El único operador unario viene dado por la negación (-). Los operadores binarios seran usados con anotación infija, mientras que el unario con anotación prefija.

*   Precedencia de operadores (listados de menor a mayor):
    
    *   +, - *binario*
    *   *, /, %
    *   - *unario*

Para los operadores aritméticos sus operandos deben ser del mismo tipo, y el resultado sera del tipo de los operando, es decir, si sus operandos son *int* el resultado sera *int*, igual manera si los operandos son *float*.

### Expresiones booleanas

Las expresiones booleanas consisten de constantes booleanas, llamadas a funciones, variables y operadores booleanos. Los operadores booleanos definidos en Pandora son: los binarios dado por el *y* lógico (and) y el *o* lógico (or). El único operador unario viene dado por la negación lógica (not), al igual que los operadores atirméticos los binarios tienen anotación infija y el unario anotación prefija.

*   Precedencia de operadores (listados de menor a mayor):

    *   or
    *   and
    *   not

Los operandos de los operadores deben ser del tipo `bool` dando como resultado un tipo `bool`.

### Expresiones Relacionales **(No se me ocurre otro título)**

Las expresiones relacionales consisten de constantes numéricas, booleanas o carácteres, llamadas a funciones, variables y operadores relaciones. Los operadores relacionales definidos en pandora son: menor que (<), mayor que (>), igual (==), mayor o igual que (>=), menor o igual que (<=) y desigual(/=). Cabe destacar que todos funcionan con los operandos de tipos *int*, *float* y *char*, estos últimos se compararan por su valor en la tabla ASCII, pero tanto el igual (==) como el desigual (/=) también pueden trabajar con operandos del tipo *bool* y *array*, para la comparación de arreglos se usa su valro de refencia. 

*   Precedencia de operadores (listados de menor a mayor):

    *   <, >, <=, >=
    *   ==, /=

El resultado de las expresiones relacionales siempre son de tipo `bool`.

**(Falta colocar la tabla con todas la precedencias y las asociaciones que tengan)**

## Chequeos a tiempo de ejecución

Se espera que sea el menor número de verificaciones posibles.

Las existentes hasta el momento se enumeran a continuación:

*   Comprobación del índice de un arreglo.
*   Acceso correcto al campo de un union.
*   División entre 0.
*   Overflow.
