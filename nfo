-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.4 from Parser.y
-----------------------------------------------------------------------------


rule 27 is unused
rule 28 is unused

terminal do is unused
terminal of is unused
terminal array is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Declarations Main "EOF"                 (1)
	Program -> Main "EOF"                              (2)
	Main -> begin Insts end                            (3)
	Declaration -> func id "(" Param ")" ":" Type Insts end   (4)
	Declaration -> proc id "(" Param ")" ":" Type Insts end   (5)
	Declaration -> struct id has Decs end              (6)
	Declaration -> union id like Decs end              (7)
	Declaration -> Dec                                 (8)
	Declaration -> Assign                              (9)
	Declarations -> Declaration                        (10)
	Declarations -> Declarations Declaration           (11)
	Decs -> Dec                                        (12)
	Decs -> Decs Dec                                   (13)
	Dec -> ListId ":" Type                             (14)
	Param ->                                           (15)
	Param -> Params                                    (16)
	Params -> Dec                                      (17)
	Params -> var Dec                                  (18)
	Params -> Params "," var Dec                       (19)
	Params -> Params "," Dec                           (20)
	Type -> intT                                       (21)
	Type -> floatT                                     (22)
	Type -> stringT                                    (23)
	Type -> charT                                      (24)
	Type -> boolT                                      (25)
	Type -> voidT                                      (26)
	Dimen -> "[" Exp "]"                               (27)
	Dimen -> Dimen "[" Exp "]"                         (28)
	Exps -> Exp                                        (29)
	Exps -> Exps "," Exp                               (30)
	Values -> true                                     (31)
	Values -> false                                    (32)
	Values -> null                                     (33)
	Values -> id                                       (34)
	Values -> int                                      (35)
	Values -> float                                    (36)
	Values -> char                                     (37)
	Values -> string                                   (38)
	Exp -> Values                                      (39)
	Exp -> Exp "+" Exp                                 (40)
	Exp -> Exp "-" Exp                                 (41)
	Exp -> Exp "/" Exp                                 (42)
	Exp -> Exp "^" Exp                                 (43)
	Exp -> Exp "*" Exp                                 (44)
	Exp -> Exp div Exp                                 (45)
	Exp -> Exp mod Exp                                 (46)
	Exp -> Exp ">" Exp                                 (47)
	Exp -> Exp ">=" Exp                                (48)
	Exp -> Exp "<" Exp                                 (49)
	Exp -> Exp "<=" Exp                                (50)
	Exp -> Exp "==" Exp                                (51)
	Exp -> Exp "/=" Exp                                (52)
	Exp -> Exp and Exp                                 (53)
	Exp -> Exp or Exp                                  (54)
	Exp -> "-" Exp                                     (55)
	Exp -> not Exp                                     (56)
	Exp -> "->" Exp                                    (57)
	Exp -> Accesor                                     (58)
	Exp -> CFunctions                                  (59)
	Exp -> "(" Exp ")"                                 (60)
	Exp -> "[" Exps "]"                                (61)
	Assign -> id "=" Exp ";"                           (62)
	Assign -> id "=" InstA                             (63)
	Assign -> Accesor "=" Exp ";"                      (64)
	ListId -> id                                       (65)
	ListId -> ListId "," id                            (66)
	Accesor -> id Accs                                 (67)
	Accs -> Acc                                        (68)
	Accs -> Accs Acc                                   (69)
	Acc -> "." id                                      (70)
	Acc -> "[" Exp "]"                                 (71)
	FuncCall -> id "(" Fields ")"                      (72)
	Fields ->                                          (73)
	Fields -> Exp                                      (74)
	Fields -> Fields "," Exp                           (75)
	CFunctions -> inttostr "(" Exp ")"                 (76)
	CFunctions -> flotostr "(" Exp ")"                 (77)
	CFunctions -> inttoflo "(" Exp ")"                 (78)
	Insts -> Inst                                      (79)
	Insts -> Insts Inst                                (80)
	InstA -> new ListId ";"                            (81)
	InstA -> read Exp ";"                              (82)
	InstA -> FuncCall ";"                              (83)
	Inst -> InstA                                      (84)
	Inst -> Assign                                     (85)
	Inst -> Dec ";"                                    (86)
	Inst -> Write                                      (87)
	Inst -> Return                                     (88)
	Inst -> free Exp ";"                               (89)
	Inst -> InstB                                      (90)
	InstB -> If                                        (91)
	InstB -> While                                     (92)
	InstB -> Repeat                                    (93)
	InstB -> For                                       (94)
	Return -> return Exp ";"                           (95)
	Return -> return FuncCall ";"                      (96)
	Write -> write Exp ";"                             (97)
	Write -> write FuncCall ";"                        (98)
	If -> if "(" Exp ")" then Block                    (99)
	If -> if "(" Exp ")" then Block else Insts end     (100)
	For -> for "(" id Range ")" Block                  (101)
	Range -> from Exp to Exp with Exp                  (102)
	While -> while "(" Exp ")" Block                   (103)
	Repeat -> repeat Insts until Exp                   (104)
	Block -> Insts end                                 (105)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"["            { Lexeme TokenBracketOpen  _ }
	"]"            { Lexeme TokenBracketClose _ }
	"("            { Lexeme TokenParenOpen _ }
	")"            { Lexeme TokenParenClose _ }
	","            { Lexeme TokenComma _ }
	";"            { Lexeme TokenSemicolon _ }
	":"            { Lexeme TokenColon _ }
	"."            { Lexeme TokenPoint _ }
	"="            { Lexeme TokenAssign _ }
	if             { Lexeme TokenIf     _ }
	then           { Lexeme TokenThen   _ }
	else           { Lexeme TokenElse   _ }
	while          { Lexeme TokenWhile  _ }
	for            { Lexeme TokenFor    _ }
	from           { Lexeme TokenFrom   _ }
	to             { Lexeme TokenTo     _ }
	with           { Lexeme TokenWith   _ }
	do             { Lexeme TokenDo     _ }
	like           { Lexeme TokenLike   _ }
	has            { Lexeme TokenHas    _ }
	return         { Lexeme TokenReturn _ }
	new            { Lexeme TokenNew    _ }
	begin          { Lexeme TokenBegin  _ }
	end            { Lexeme TokenEnd    _ }
	func           { Lexeme TokenFunc   _ }
	proc           { Lexeme TokenProc   _ }
	free           { Lexeme TokenFree   _ }
	repeat         { Lexeme TokenRepeat _ }
	until          { Lexeme TokenUntil  _ }
	read           { Lexeme TokenRead   _ }
	write          { Lexeme TokenWrite  _ }
	of             { Lexeme TokenOf     _ }
	inttostr       { Lexeme TokenITS    _ }
	flotostr       { Lexeme TokenFTS    _ }
	inttoflo       { Lexeme TokenITF    _ }
	intT           { Lexeme TokenIntT   _ }
	boolT          { Lexeme TokenBoolT  _ }
	floatT         { Lexeme TokenFloatT _ }
	charT          { Lexeme TokenCharT  _ }
	struct         { Lexeme TokenStruct _ }
	union          { Lexeme TokenUnion  _ }
	voidT          { Lexeme TokenVoid   _ }
	array          { Lexeme TokenArray  _ }
	stringT        { Lexeme TokenStringT _ }
	true           { Lexeme TokenTrue  _ }
	false          { Lexeme TokenFalse _ }
	null           { Lexeme TokenNull _ }
	var            { Lexeme TokenVar _ }
	"<"            { Lexeme TokenLT    _ }
	">"            { Lexeme TokenGT    _ }
	"<="           { Lexeme TokenLE    _ }
	">="           { Lexeme TokenGE    _ }
	"=="           { Lexeme TokenEq    _ }
	"/="           { Lexeme TokenIneq  _ }
	or             { Lexeme TokenOr    _ }
	and            { Lexeme TokenAnd   _ }
	"+"            { Lexeme TokenPlus  _ }
	"-"            { Lexeme TokenMinus _ }
	"*"            { Lexeme TokenAsterisk _ }
	"/"            { Lexeme TokenDivFloat _ }
	div            { Lexeme TokenDivInt _ }
	mod            { Lexeme TokenMod    _ }
	"^"            { Lexeme TokenCircum _ }
	not            { Lexeme TokenNot   _ }
	"->"           { Lexeme TokenArrow _ }
	int            { Lexeme ( TokenInt    _ ) _ }
	float          { Lexeme ( TokenFloat  _ ) _ }
	char           { Lexeme ( TokenChar   _ ) _ }
	string         { Lexeme ( TokenString _ ) _ }
	id             { Lexeme ( TokenIdent  _ ) _ }
	"EOF"          { Lexeme TokenEOF _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rules 1, 2
	Main            rule  3
	Declaration     rules 4, 5, 6, 7, 8, 9
	Declarations    rules 10, 11
	Decs            rules 12, 13
	Dec             rule  14
	Param           rules 15, 16
	Params          rules 17, 18, 19, 20
	Type            rules 21, 22, 23, 24, 25, 26
	Dimen           rules 27, 28
	Exps            rules 29, 30
	Values          rules 31, 32, 33, 34, 35, 36, 37, 38
	Exp             rules 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
	Assign          rules 62, 63, 64
	ListId          rules 65, 66
	Accesor         rule  67
	Accs            rules 68, 69
	Acc             rules 70, 71
	FuncCall        rule  72
	Fields          rules 73, 74, 75
	CFunctions      rules 76, 77, 78
	Insts           rules 79, 80
	InstA           rules 81, 82, 83
	Inst            rules 84, 85, 86, 87, 88, 89, 90
	InstB           rules 91, 92, 93, 94
	Return          rules 95, 96
	Write           rules 97, 98
	If              rules 99, 100
	For             rule  101
	Range           rule  102
	While           rule  103
	Repeat          rule  104
	Block           rule  105

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	begin          shift, and enter state 15
	func           shift, and enter state 8
	proc           shift, and enter state 9
	struct         shift, and enter state 10
	union          shift, and enter state 11
	id             shift, and enter state 12

	Program        goto state 13
	Main           goto state 14
	Declaration    goto state 2
	Declarations   goto state 3
	Dec            goto state 4
	Assign         goto state 5
	ListId         goto state 6
	Accesor        goto state 7

State 1


	func           shift, and enter state 8
	proc           shift, and enter state 9
	struct         shift, and enter state 10
	union          shift, and enter state 11
	id             shift, and enter state 12

	Declaration    goto state 2
	Declarations   goto state 3
	Dec            goto state 4
	Assign         goto state 5
	ListId         goto state 6
	Accesor        goto state 7

State 2

	Declarations -> Declaration .                       (rule 10)

	begin          reduce using rule 10
	func           reduce using rule 10
	proc           reduce using rule 10
	struct         reduce using rule 10
	union          reduce using rule 10
	id             reduce using rule 10


State 3

	Program -> Declarations . Main "EOF"                (rule 1)
	Declarations -> Declarations . Declaration          (rule 11)

	begin          shift, and enter state 15
	func           shift, and enter state 8
	proc           shift, and enter state 9
	struct         shift, and enter state 10
	union          shift, and enter state 11
	id             shift, and enter state 12

	Main           goto state 52
	Declaration    goto state 53
	Dec            goto state 4
	Assign         goto state 5
	ListId         goto state 6
	Accesor        goto state 7

State 4

	Declaration -> Dec .                                (rule 8)

	begin          reduce using rule 8
	func           reduce using rule 8
	proc           reduce using rule 8
	struct         reduce using rule 8
	union          reduce using rule 8
	id             reduce using rule 8


State 5

	Declaration -> Assign .                             (rule 9)

	begin          reduce using rule 9
	func           reduce using rule 9
	proc           reduce using rule 9
	struct         reduce using rule 9
	union          reduce using rule 9
	id             reduce using rule 9


State 6

	Dec -> ListId . ":" Type                            (rule 14)
	ListId -> ListId . "," id                           (rule 66)

	","            shift, and enter state 50
	":"            shift, and enter state 51


State 7

	Assign -> Accesor . "=" Exp ";"                     (rule 64)

	"="            shift, and enter state 49


State 8

	Declaration -> func . id "(" Param ")" ":" Type Insts end    (rule 4)

	id             shift, and enter state 48


State 9

	Declaration -> proc . id "(" Param ")" ":" Type Insts end    (rule 5)

	id             shift, and enter state 47


State 10

	Declaration -> struct . id has Decs end             (rule 6)

	id             shift, and enter state 46


State 11

	Declaration -> union . id like Decs end             (rule 7)

	id             shift, and enter state 45


State 12

	Assign -> id . "=" Exp ";"                          (rule 62)
	Assign -> id . "=" InstA                            (rule 63)
	ListId -> id .                                      (rule 65)
	Accesor -> id . Accs                                (rule 67)

	"["            shift, and enter state 42
	","            reduce using rule 65
	":"            reduce using rule 65
	"."            shift, and enter state 43
	"="            shift, and enter state 44

	Accs           goto state 40
	Acc            goto state 41

State 13

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 14

	Program -> Main . "EOF"                             (rule 2)

	"EOF"          shift, and enter state 39


State 15

	Main -> begin . Insts end                           (rule 3)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 19
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 16

	Inst -> Dec . ";"                                   (rule 86)

	";"            shift, and enter state 109


State 17

	Inst -> Assign .                                    (rule 85)

	if             reduce using rule 85
	while          reduce using rule 85
	for            reduce using rule 85
	return         reduce using rule 85
	new            reduce using rule 85
	end            reduce using rule 85
	free           reduce using rule 85
	repeat         reduce using rule 85
	until          reduce using rule 85
	read           reduce using rule 85
	write          reduce using rule 85
	id             reduce using rule 85


State 18

	InstA -> FuncCall . ";"                             (rule 83)

	";"            shift, and enter state 108


State 19

	Main -> begin Insts . end                           (rule 3)
	Insts -> Insts . Inst                               (rule 80)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	end            shift, and enter state 107
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	InstA          goto state 20
	Inst           goto state 106
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 20

	Inst -> InstA .                                     (rule 84)

	if             reduce using rule 84
	while          reduce using rule 84
	for            reduce using rule 84
	return         reduce using rule 84
	new            reduce using rule 84
	end            reduce using rule 84
	free           reduce using rule 84
	repeat         reduce using rule 84
	until          reduce using rule 84
	read           reduce using rule 84
	write          reduce using rule 84
	id             reduce using rule 84


State 21

	Insts -> Inst .                                     (rule 79)

	if             reduce using rule 79
	while          reduce using rule 79
	for            reduce using rule 79
	return         reduce using rule 79
	new            reduce using rule 79
	end            reduce using rule 79
	free           reduce using rule 79
	repeat         reduce using rule 79
	until          reduce using rule 79
	read           reduce using rule 79
	write          reduce using rule 79
	id             reduce using rule 79


State 22

	Inst -> InstB .                                     (rule 90)

	if             reduce using rule 90
	while          reduce using rule 90
	for            reduce using rule 90
	return         reduce using rule 90
	new            reduce using rule 90
	end            reduce using rule 90
	free           reduce using rule 90
	repeat         reduce using rule 90
	until          reduce using rule 90
	read           reduce using rule 90
	write          reduce using rule 90
	id             reduce using rule 90


State 23

	Inst -> Return .                                    (rule 88)

	if             reduce using rule 88
	while          reduce using rule 88
	for            reduce using rule 88
	return         reduce using rule 88
	new            reduce using rule 88
	end            reduce using rule 88
	free           reduce using rule 88
	repeat         reduce using rule 88
	until          reduce using rule 88
	read           reduce using rule 88
	write          reduce using rule 88
	id             reduce using rule 88


State 24

	Inst -> Write .                                     (rule 87)

	if             reduce using rule 87
	while          reduce using rule 87
	for            reduce using rule 87
	return         reduce using rule 87
	new            reduce using rule 87
	end            reduce using rule 87
	free           reduce using rule 87
	repeat         reduce using rule 87
	until          reduce using rule 87
	read           reduce using rule 87
	write          reduce using rule 87
	id             reduce using rule 87


State 25

	InstB -> If .                                       (rule 91)

	if             reduce using rule 91
	while          reduce using rule 91
	for            reduce using rule 91
	return         reduce using rule 91
	new            reduce using rule 91
	end            reduce using rule 91
	free           reduce using rule 91
	repeat         reduce using rule 91
	until          reduce using rule 91
	read           reduce using rule 91
	write          reduce using rule 91
	id             reduce using rule 91


State 26

	InstB -> For .                                      (rule 94)

	if             reduce using rule 94
	while          reduce using rule 94
	for            reduce using rule 94
	return         reduce using rule 94
	new            reduce using rule 94
	end            reduce using rule 94
	free           reduce using rule 94
	repeat         reduce using rule 94
	until          reduce using rule 94
	read           reduce using rule 94
	write          reduce using rule 94
	id             reduce using rule 94


State 27

	InstB -> While .                                    (rule 92)

	if             reduce using rule 92
	while          reduce using rule 92
	for            reduce using rule 92
	return         reduce using rule 92
	new            reduce using rule 92
	end            reduce using rule 92
	free           reduce using rule 92
	repeat         reduce using rule 92
	until          reduce using rule 92
	read           reduce using rule 92
	write          reduce using rule 92
	id             reduce using rule 92


State 28

	InstB -> Repeat .                                   (rule 93)

	if             reduce using rule 93
	while          reduce using rule 93
	for            reduce using rule 93
	return         reduce using rule 93
	new            reduce using rule 93
	end            reduce using rule 93
	free           reduce using rule 93
	repeat         reduce using rule 93
	until          reduce using rule 93
	read           reduce using rule 93
	write          reduce using rule 93
	id             reduce using rule 93


State 29

	If -> if . "(" Exp ")" then Block                   (rule 99)
	If -> if . "(" Exp ")" then Block else Insts end    (rule 100)

	"("            shift, and enter state 105


State 30

	While -> while . "(" Exp ")" Block                  (rule 103)

	"("            shift, and enter state 104


State 31

	For -> for . "(" id Range ")" Block                 (rule 101)

	"("            shift, and enter state 103


State 32

	Return -> return . Exp ";"                          (rule 95)
	Return -> return . FuncCall ";"                     (rule 96)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 89

	Values         goto state 63
	Exp            goto state 101
	Accesor        goto state 65
	FuncCall       goto state 102
	CFunctions     goto state 66

State 33

	InstA -> new . ListId ";"                           (rule 81)

	id             shift, and enter state 100

	ListId         goto state 99

State 34

	Inst -> free . Exp ";"                              (rule 89)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 98
	Accesor        goto state 65
	CFunctions     goto state 66

State 35

	Repeat -> repeat . Insts until Exp                  (rule 104)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 97
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 36

	InstA -> read . Exp ";"                             (rule 82)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 96
	Accesor        goto state 65
	CFunctions     goto state 66

State 37

	Write -> write . Exp ";"                            (rule 97)
	Write -> write . FuncCall ";"                       (rule 98)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 89

	Values         goto state 63
	Exp            goto state 94
	Accesor        goto state 65
	FuncCall       goto state 95
	CFunctions     goto state 66

State 38

	Assign -> id . "=" Exp ";"                          (rule 62)
	Assign -> id . "=" InstA                            (rule 63)
	ListId -> id .                                      (rule 65)
	Accesor -> id . Accs                                (rule 67)
	FuncCall -> id . "(" Fields ")"                     (rule 72)

	"["            shift, and enter state 42
	"("            shift, and enter state 93
	","            reduce using rule 65
	":"            reduce using rule 65
	"."            shift, and enter state 43
	"="            shift, and enter state 44

	Accs           goto state 40
	Acc            goto state 41

State 39

	Program -> Main "EOF" .                             (rule 2)

	%eof           reduce using rule 2


State 40

	Accesor -> id Accs .                                (rule 67)
	Accs -> Accs . Acc                                  (rule 69)

	"["            shift, and enter state 42
	"]"            reduce using rule 67
	")"            reduce using rule 67
	","            reduce using rule 67
	";"            reduce using rule 67
	"."            shift, and enter state 43
	"="            reduce using rule 67
	if             reduce using rule 67
	while          reduce using rule 67
	for            reduce using rule 67
	to             reduce using rule 67
	with           reduce using rule 67
	return         reduce using rule 67
	new            reduce using rule 67
	end            reduce using rule 67
	free           reduce using rule 67
	repeat         reduce using rule 67
	until          reduce using rule 67
	read           reduce using rule 67
	write          reduce using rule 67
	"<"            reduce using rule 67
	">"            reduce using rule 67
	"<="           reduce using rule 67
	">="           reduce using rule 67
	"=="           reduce using rule 67
	"/="           reduce using rule 67
	or             reduce using rule 67
	and            reduce using rule 67
	"+"            reduce using rule 67
	"-"            reduce using rule 67
	"*"            reduce using rule 67
	"/"            reduce using rule 67
	div            reduce using rule 67
	mod            reduce using rule 67
	"^"            reduce using rule 67
	id             reduce using rule 67

	Acc            goto state 92

State 41

	Accs -> Acc .                                       (rule 68)

	"["            reduce using rule 68
	"]"            reduce using rule 68
	")"            reduce using rule 68
	","            reduce using rule 68
	";"            reduce using rule 68
	"."            reduce using rule 68
	"="            reduce using rule 68
	if             reduce using rule 68
	while          reduce using rule 68
	for            reduce using rule 68
	to             reduce using rule 68
	with           reduce using rule 68
	return         reduce using rule 68
	new            reduce using rule 68
	end            reduce using rule 68
	free           reduce using rule 68
	repeat         reduce using rule 68
	until          reduce using rule 68
	read           reduce using rule 68
	write          reduce using rule 68
	"<"            reduce using rule 68
	">"            reduce using rule 68
	"<="           reduce using rule 68
	">="           reduce using rule 68
	"=="           reduce using rule 68
	"/="           reduce using rule 68
	or             reduce using rule 68
	and            reduce using rule 68
	"+"            reduce using rule 68
	"-"            reduce using rule 68
	"*"            reduce using rule 68
	"/"            reduce using rule 68
	div            reduce using rule 68
	mod            reduce using rule 68
	"^"            reduce using rule 68
	id             reduce using rule 68


State 42

	Acc -> "[" . Exp "]"                                (rule 71)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 91
	Accesor        goto state 65
	CFunctions     goto state 66

State 43

	Acc -> "." . id                                     (rule 70)

	id             shift, and enter state 90


State 44

	Assign -> id "=" . Exp ";"                          (rule 62)
	Assign -> id "=" . InstA                            (rule 63)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	new            shift, and enter state 33
	read           shift, and enter state 36
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 89

	Values         goto state 63
	Exp            goto state 87
	Accesor        goto state 65
	FuncCall       goto state 18
	CFunctions     goto state 66
	InstA          goto state 88

State 45

	Declaration -> union id . like Decs end             (rule 7)

	like           shift, and enter state 86


State 46

	Declaration -> struct id . has Decs end             (rule 6)

	has            shift, and enter state 85


State 47

	Declaration -> proc id . "(" Param ")" ":" Type Insts end    (rule 5)

	"("            shift, and enter state 84


State 48

	Declaration -> func id . "(" Param ")" ":" Type Insts end    (rule 4)

	"("            shift, and enter state 83


State 49

	Assign -> Accesor "=" . Exp ";"                     (rule 64)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 64
	Accesor        goto state 65
	CFunctions     goto state 66

State 50

	ListId -> ListId "," . id                           (rule 66)

	id             shift, and enter state 62


State 51

	Dec -> ListId ":" . Type                            (rule 14)

	intT           shift, and enter state 56
	boolT          shift, and enter state 57
	floatT         shift, and enter state 58
	charT          shift, and enter state 59
	voidT          shift, and enter state 60
	stringT        shift, and enter state 61

	Type           goto state 55

State 52

	Program -> Declarations Main . "EOF"                (rule 1)

	"EOF"          shift, and enter state 54


State 53

	Declarations -> Declarations Declaration .          (rule 11)

	begin          reduce using rule 11
	func           reduce using rule 11
	proc           reduce using rule 11
	struct         reduce using rule 11
	union          reduce using rule 11
	id             reduce using rule 11


State 54

	Program -> Declarations Main "EOF" .                (rule 1)

	%eof           reduce using rule 1


State 55

	Dec -> ListId ":" Type .                            (rule 14)

	")"            reduce using rule 14
	","            reduce using rule 14
	";"            reduce using rule 14
	begin          reduce using rule 14
	end            reduce using rule 14
	func           reduce using rule 14
	proc           reduce using rule 14
	struct         reduce using rule 14
	union          reduce using rule 14
	id             reduce using rule 14


State 56

	Type -> intT .                                      (rule 21)

	")"            reduce using rule 21
	","            reduce using rule 21
	";"            reduce using rule 21
	if             reduce using rule 21
	while          reduce using rule 21
	for            reduce using rule 21
	return         reduce using rule 21
	new            reduce using rule 21
	begin          reduce using rule 21
	end            reduce using rule 21
	func           reduce using rule 21
	proc           reduce using rule 21
	free           reduce using rule 21
	repeat         reduce using rule 21
	read           reduce using rule 21
	write          reduce using rule 21
	struct         reduce using rule 21
	union          reduce using rule 21
	id             reduce using rule 21


State 57

	Type -> boolT .                                     (rule 25)

	")"            reduce using rule 25
	","            reduce using rule 25
	";"            reduce using rule 25
	if             reduce using rule 25
	while          reduce using rule 25
	for            reduce using rule 25
	return         reduce using rule 25
	new            reduce using rule 25
	begin          reduce using rule 25
	end            reduce using rule 25
	func           reduce using rule 25
	proc           reduce using rule 25
	free           reduce using rule 25
	repeat         reduce using rule 25
	read           reduce using rule 25
	write          reduce using rule 25
	struct         reduce using rule 25
	union          reduce using rule 25
	id             reduce using rule 25


State 58

	Type -> floatT .                                    (rule 22)

	")"            reduce using rule 22
	","            reduce using rule 22
	";"            reduce using rule 22
	if             reduce using rule 22
	while          reduce using rule 22
	for            reduce using rule 22
	return         reduce using rule 22
	new            reduce using rule 22
	begin          reduce using rule 22
	end            reduce using rule 22
	func           reduce using rule 22
	proc           reduce using rule 22
	free           reduce using rule 22
	repeat         reduce using rule 22
	read           reduce using rule 22
	write          reduce using rule 22
	struct         reduce using rule 22
	union          reduce using rule 22
	id             reduce using rule 22


State 59

	Type -> charT .                                     (rule 24)

	")"            reduce using rule 24
	","            reduce using rule 24
	";"            reduce using rule 24
	if             reduce using rule 24
	while          reduce using rule 24
	for            reduce using rule 24
	return         reduce using rule 24
	new            reduce using rule 24
	begin          reduce using rule 24
	end            reduce using rule 24
	func           reduce using rule 24
	proc           reduce using rule 24
	free           reduce using rule 24
	repeat         reduce using rule 24
	read           reduce using rule 24
	write          reduce using rule 24
	struct         reduce using rule 24
	union          reduce using rule 24
	id             reduce using rule 24


State 60

	Type -> voidT .                                     (rule 26)

	")"            reduce using rule 26
	","            reduce using rule 26
	";"            reduce using rule 26
	if             reduce using rule 26
	while          reduce using rule 26
	for            reduce using rule 26
	return         reduce using rule 26
	new            reduce using rule 26
	begin          reduce using rule 26
	end            reduce using rule 26
	func           reduce using rule 26
	proc           reduce using rule 26
	free           reduce using rule 26
	repeat         reduce using rule 26
	read           reduce using rule 26
	write          reduce using rule 26
	struct         reduce using rule 26
	union          reduce using rule 26
	id             reduce using rule 26


State 61

	Type -> stringT .                                   (rule 23)

	")"            reduce using rule 23
	","            reduce using rule 23
	";"            reduce using rule 23
	if             reduce using rule 23
	while          reduce using rule 23
	for            reduce using rule 23
	return         reduce using rule 23
	new            reduce using rule 23
	begin          reduce using rule 23
	end            reduce using rule 23
	func           reduce using rule 23
	proc           reduce using rule 23
	free           reduce using rule 23
	repeat         reduce using rule 23
	read           reduce using rule 23
	write          reduce using rule 23
	struct         reduce using rule 23
	union          reduce using rule 23
	id             reduce using rule 23


State 62

	ListId -> ListId "," id .                           (rule 66)

	","            reduce using rule 66
	";"            reduce using rule 66
	":"            reduce using rule 66


State 63

	Exp -> Values .                                     (rule 39)

	"]"            reduce using rule 39
	")"            reduce using rule 39
	","            reduce using rule 39
	";"            reduce using rule 39
	if             reduce using rule 39
	while          reduce using rule 39
	for            reduce using rule 39
	to             reduce using rule 39
	with           reduce using rule 39
	return         reduce using rule 39
	new            reduce using rule 39
	end            reduce using rule 39
	free           reduce using rule 39
	repeat         reduce using rule 39
	until          reduce using rule 39
	read           reduce using rule 39
	write          reduce using rule 39
	"<"            reduce using rule 39
	">"            reduce using rule 39
	"<="           reduce using rule 39
	">="           reduce using rule 39
	"=="           reduce using rule 39
	"/="           reduce using rule 39
	or             reduce using rule 39
	and            reduce using rule 39
	"+"            reduce using rule 39
	"-"            reduce using rule 39
	"*"            reduce using rule 39
	"/"            reduce using rule 39
	div            reduce using rule 39
	mod            reduce using rule 39
	"^"            reduce using rule 39
	id             reduce using rule 39


State 64

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Assign -> Accesor "=" Exp . ";"                     (rule 64)

	";"            shift, and enter state 157
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 65

	Exp -> Accesor .                                    (rule 58)

	"]"            reduce using rule 58
	")"            reduce using rule 58
	","            reduce using rule 58
	";"            reduce using rule 58
	if             reduce using rule 58
	while          reduce using rule 58
	for            reduce using rule 58
	to             reduce using rule 58
	with           reduce using rule 58
	return         reduce using rule 58
	new            reduce using rule 58
	end            reduce using rule 58
	free           reduce using rule 58
	repeat         reduce using rule 58
	until          reduce using rule 58
	read           reduce using rule 58
	write          reduce using rule 58
	"<"            reduce using rule 58
	">"            reduce using rule 58
	"<="           reduce using rule 58
	">="           reduce using rule 58
	"=="           reduce using rule 58
	"/="           reduce using rule 58
	or             reduce using rule 58
	and            reduce using rule 58
	"+"            reduce using rule 58
	"-"            reduce using rule 58
	"*"            reduce using rule 58
	"/"            reduce using rule 58
	div            reduce using rule 58
	mod            reduce using rule 58
	"^"            reduce using rule 58
	id             reduce using rule 58


State 66

	Exp -> CFunctions .                                 (rule 59)

	"]"            reduce using rule 59
	")"            reduce using rule 59
	","            reduce using rule 59
	";"            reduce using rule 59
	if             reduce using rule 59
	while          reduce using rule 59
	for            reduce using rule 59
	to             reduce using rule 59
	with           reduce using rule 59
	return         reduce using rule 59
	new            reduce using rule 59
	end            reduce using rule 59
	free           reduce using rule 59
	repeat         reduce using rule 59
	until          reduce using rule 59
	read           reduce using rule 59
	write          reduce using rule 59
	"<"            reduce using rule 59
	">"            reduce using rule 59
	"<="           reduce using rule 59
	">="           reduce using rule 59
	"=="           reduce using rule 59
	"/="           reduce using rule 59
	or             reduce using rule 59
	and            reduce using rule 59
	"+"            reduce using rule 59
	"-"            reduce using rule 59
	"*"            reduce using rule 59
	"/"            reduce using rule 59
	div            reduce using rule 59
	mod            reduce using rule 59
	"^"            reduce using rule 59
	id             reduce using rule 59


State 67

	Exp -> "[" . Exps "]"                               (rule 61)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Exps           goto state 155
	Values         goto state 63
	Exp            goto state 156
	Accesor        goto state 65
	CFunctions     goto state 66

State 68

	Exp -> "(" . Exp ")"                                (rule 60)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 154
	Accesor        goto state 65
	CFunctions     goto state 66

State 69

	CFunctions -> inttostr . "(" Exp ")"                (rule 76)

	"("            shift, and enter state 153


State 70

	CFunctions -> flotostr . "(" Exp ")"                (rule 77)

	"("            shift, and enter state 152


State 71

	CFunctions -> inttoflo . "(" Exp ")"                (rule 78)

	"("            shift, and enter state 151


State 72

	Values -> true .                                    (rule 31)

	"]"            reduce using rule 31
	")"            reduce using rule 31
	","            reduce using rule 31
	";"            reduce using rule 31
	if             reduce using rule 31
	while          reduce using rule 31
	for            reduce using rule 31
	to             reduce using rule 31
	with           reduce using rule 31
	return         reduce using rule 31
	new            reduce using rule 31
	end            reduce using rule 31
	free           reduce using rule 31
	repeat         reduce using rule 31
	until          reduce using rule 31
	read           reduce using rule 31
	write          reduce using rule 31
	"<"            reduce using rule 31
	">"            reduce using rule 31
	"<="           reduce using rule 31
	">="           reduce using rule 31
	"=="           reduce using rule 31
	"/="           reduce using rule 31
	or             reduce using rule 31
	and            reduce using rule 31
	"+"            reduce using rule 31
	"-"            reduce using rule 31
	"*"            reduce using rule 31
	"/"            reduce using rule 31
	div            reduce using rule 31
	mod            reduce using rule 31
	"^"            reduce using rule 31
	id             reduce using rule 31


State 73

	Values -> false .                                   (rule 32)

	"]"            reduce using rule 32
	")"            reduce using rule 32
	","            reduce using rule 32
	";"            reduce using rule 32
	if             reduce using rule 32
	while          reduce using rule 32
	for            reduce using rule 32
	to             reduce using rule 32
	with           reduce using rule 32
	return         reduce using rule 32
	new            reduce using rule 32
	end            reduce using rule 32
	free           reduce using rule 32
	repeat         reduce using rule 32
	until          reduce using rule 32
	read           reduce using rule 32
	write          reduce using rule 32
	"<"            reduce using rule 32
	">"            reduce using rule 32
	"<="           reduce using rule 32
	">="           reduce using rule 32
	"=="           reduce using rule 32
	"/="           reduce using rule 32
	or             reduce using rule 32
	and            reduce using rule 32
	"+"            reduce using rule 32
	"-"            reduce using rule 32
	"*"            reduce using rule 32
	"/"            reduce using rule 32
	div            reduce using rule 32
	mod            reduce using rule 32
	"^"            reduce using rule 32
	id             reduce using rule 32


State 74

	Values -> null .                                    (rule 33)

	"]"            reduce using rule 33
	")"            reduce using rule 33
	","            reduce using rule 33
	";"            reduce using rule 33
	if             reduce using rule 33
	while          reduce using rule 33
	for            reduce using rule 33
	to             reduce using rule 33
	with           reduce using rule 33
	return         reduce using rule 33
	new            reduce using rule 33
	end            reduce using rule 33
	free           reduce using rule 33
	repeat         reduce using rule 33
	until          reduce using rule 33
	read           reduce using rule 33
	write          reduce using rule 33
	"<"            reduce using rule 33
	">"            reduce using rule 33
	"<="           reduce using rule 33
	">="           reduce using rule 33
	"=="           reduce using rule 33
	"/="           reduce using rule 33
	or             reduce using rule 33
	and            reduce using rule 33
	"+"            reduce using rule 33
	"-"            reduce using rule 33
	"*"            reduce using rule 33
	"/"            reduce using rule 33
	div            reduce using rule 33
	mod            reduce using rule 33
	"^"            reduce using rule 33
	id             reduce using rule 33


State 75

	Exp -> "-" . Exp                                    (rule 55)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 150
	Accesor        goto state 65
	CFunctions     goto state 66

State 76

	Exp -> not . Exp                                    (rule 56)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 149
	Accesor        goto state 65
	CFunctions     goto state 66

State 77

	Exp -> "->" . Exp                                   (rule 57)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 148
	Accesor        goto state 65
	CFunctions     goto state 66

State 78

	Values -> int .                                     (rule 35)

	"]"            reduce using rule 35
	")"            reduce using rule 35
	","            reduce using rule 35
	";"            reduce using rule 35
	if             reduce using rule 35
	while          reduce using rule 35
	for            reduce using rule 35
	to             reduce using rule 35
	with           reduce using rule 35
	return         reduce using rule 35
	new            reduce using rule 35
	end            reduce using rule 35
	free           reduce using rule 35
	repeat         reduce using rule 35
	until          reduce using rule 35
	read           reduce using rule 35
	write          reduce using rule 35
	"<"            reduce using rule 35
	">"            reduce using rule 35
	"<="           reduce using rule 35
	">="           reduce using rule 35
	"=="           reduce using rule 35
	"/="           reduce using rule 35
	or             reduce using rule 35
	and            reduce using rule 35
	"+"            reduce using rule 35
	"-"            reduce using rule 35
	"*"            reduce using rule 35
	"/"            reduce using rule 35
	div            reduce using rule 35
	mod            reduce using rule 35
	"^"            reduce using rule 35
	id             reduce using rule 35


State 79

	Values -> float .                                   (rule 36)

	"]"            reduce using rule 36
	")"            reduce using rule 36
	","            reduce using rule 36
	";"            reduce using rule 36
	if             reduce using rule 36
	while          reduce using rule 36
	for            reduce using rule 36
	to             reduce using rule 36
	with           reduce using rule 36
	return         reduce using rule 36
	new            reduce using rule 36
	end            reduce using rule 36
	free           reduce using rule 36
	repeat         reduce using rule 36
	until          reduce using rule 36
	read           reduce using rule 36
	write          reduce using rule 36
	"<"            reduce using rule 36
	">"            reduce using rule 36
	"<="           reduce using rule 36
	">="           reduce using rule 36
	"=="           reduce using rule 36
	"/="           reduce using rule 36
	or             reduce using rule 36
	and            reduce using rule 36
	"+"            reduce using rule 36
	"-"            reduce using rule 36
	"*"            reduce using rule 36
	"/"            reduce using rule 36
	div            reduce using rule 36
	mod            reduce using rule 36
	"^"            reduce using rule 36
	id             reduce using rule 36


State 80

	Values -> char .                                    (rule 37)

	"]"            reduce using rule 37
	")"            reduce using rule 37
	","            reduce using rule 37
	";"            reduce using rule 37
	if             reduce using rule 37
	while          reduce using rule 37
	for            reduce using rule 37
	to             reduce using rule 37
	with           reduce using rule 37
	return         reduce using rule 37
	new            reduce using rule 37
	end            reduce using rule 37
	free           reduce using rule 37
	repeat         reduce using rule 37
	until          reduce using rule 37
	read           reduce using rule 37
	write          reduce using rule 37
	"<"            reduce using rule 37
	">"            reduce using rule 37
	"<="           reduce using rule 37
	">="           reduce using rule 37
	"=="           reduce using rule 37
	"/="           reduce using rule 37
	or             reduce using rule 37
	and            reduce using rule 37
	"+"            reduce using rule 37
	"-"            reduce using rule 37
	"*"            reduce using rule 37
	"/"            reduce using rule 37
	div            reduce using rule 37
	mod            reduce using rule 37
	"^"            reduce using rule 37
	id             reduce using rule 37


State 81

	Values -> string .                                  (rule 38)

	"]"            reduce using rule 38
	")"            reduce using rule 38
	","            reduce using rule 38
	";"            reduce using rule 38
	if             reduce using rule 38
	while          reduce using rule 38
	for            reduce using rule 38
	to             reduce using rule 38
	with           reduce using rule 38
	return         reduce using rule 38
	new            reduce using rule 38
	end            reduce using rule 38
	free           reduce using rule 38
	repeat         reduce using rule 38
	until          reduce using rule 38
	read           reduce using rule 38
	write          reduce using rule 38
	"<"            reduce using rule 38
	">"            reduce using rule 38
	"<="           reduce using rule 38
	">="           reduce using rule 38
	"=="           reduce using rule 38
	"/="           reduce using rule 38
	or             reduce using rule 38
	and            reduce using rule 38
	"+"            reduce using rule 38
	"-"            reduce using rule 38
	"*"            reduce using rule 38
	"/"            reduce using rule 38
	div            reduce using rule 38
	mod            reduce using rule 38
	"^"            reduce using rule 38
	id             reduce using rule 38


State 82

	Values -> id .                                      (rule 34)
	Accesor -> id . Accs                                (rule 67)

	"["            shift, and enter state 42
	"]"            reduce using rule 34
	")"            reduce using rule 34
	","            reduce using rule 34
	";"            reduce using rule 34
	"."            shift, and enter state 43
	if             reduce using rule 34
	while          reduce using rule 34
	for            reduce using rule 34
	to             reduce using rule 34
	with           reduce using rule 34
	return         reduce using rule 34
	new            reduce using rule 34
	end            reduce using rule 34
	free           reduce using rule 34
	repeat         reduce using rule 34
	until          reduce using rule 34
	read           reduce using rule 34
	write          reduce using rule 34
	"<"            reduce using rule 34
	">"            reduce using rule 34
	"<="           reduce using rule 34
	">="           reduce using rule 34
	"=="           reduce using rule 34
	"/="           reduce using rule 34
	or             reduce using rule 34
	and            reduce using rule 34
	"+"            reduce using rule 34
	"-"            reduce using rule 34
	"*"            reduce using rule 34
	"/"            reduce using rule 34
	div            reduce using rule 34
	mod            reduce using rule 34
	"^"            reduce using rule 34
	id             reduce using rule 34

	Accs           goto state 40
	Acc            goto state 41

State 83

	Declaration -> func id "(" . Param ")" ":" Type Insts end    (rule 4)

	")"            reduce using rule 15
	var            shift, and enter state 146
	id             shift, and enter state 100

	Dec            goto state 143
	Param          goto state 147
	Params         goto state 145
	ListId         goto state 6

State 84

	Declaration -> proc id "(" . Param ")" ":" Type Insts end    (rule 5)

	")"            reduce using rule 15
	var            shift, and enter state 146
	id             shift, and enter state 100

	Dec            goto state 143
	Param          goto state 144
	Params         goto state 145
	ListId         goto state 6

State 85

	Declaration -> struct id has . Decs end             (rule 6)

	id             shift, and enter state 100

	Decs           goto state 142
	Dec            goto state 141
	ListId         goto state 6

State 86

	Declaration -> union id like . Decs end             (rule 7)

	id             shift, and enter state 100

	Decs           goto state 140
	Dec            goto state 141
	ListId         goto state 6

State 87

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Assign -> id "=" Exp . ";"                          (rule 62)

	";"            shift, and enter state 139
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 88

	Assign -> id "=" InstA .                            (rule 63)

	if             reduce using rule 63
	while          reduce using rule 63
	for            reduce using rule 63
	return         reduce using rule 63
	new            reduce using rule 63
	begin          reduce using rule 63
	end            reduce using rule 63
	func           reduce using rule 63
	proc           reduce using rule 63
	free           reduce using rule 63
	repeat         reduce using rule 63
	until          reduce using rule 63
	read           reduce using rule 63
	write          reduce using rule 63
	struct         reduce using rule 63
	union          reduce using rule 63
	id             reduce using rule 63


State 89

	Values -> id .                                      (rule 34)
	Accesor -> id . Accs                                (rule 67)
	FuncCall -> id . "(" Fields ")"                     (rule 72)

	"["            shift, and enter state 42
	"("            shift, and enter state 93
	";"            reduce using rule 34
	"."            shift, and enter state 43
	"<"            reduce using rule 34
	">"            reduce using rule 34
	"<="           reduce using rule 34
	">="           reduce using rule 34
	"=="           reduce using rule 34
	"/="           reduce using rule 34
	or             reduce using rule 34
	and            reduce using rule 34
	"+"            reduce using rule 34
	"-"            reduce using rule 34
	"*"            reduce using rule 34
	"/"            reduce using rule 34
	div            reduce using rule 34
	mod            reduce using rule 34
	"^"            reduce using rule 34

	Accs           goto state 40
	Acc            goto state 41

State 90

	Acc -> "." id .                                     (rule 70)

	"["            reduce using rule 70
	"]"            reduce using rule 70
	")"            reduce using rule 70
	","            reduce using rule 70
	";"            reduce using rule 70
	"."            reduce using rule 70
	"="            reduce using rule 70
	if             reduce using rule 70
	while          reduce using rule 70
	for            reduce using rule 70
	to             reduce using rule 70
	with           reduce using rule 70
	return         reduce using rule 70
	new            reduce using rule 70
	end            reduce using rule 70
	free           reduce using rule 70
	repeat         reduce using rule 70
	until          reduce using rule 70
	read           reduce using rule 70
	write          reduce using rule 70
	"<"            reduce using rule 70
	">"            reduce using rule 70
	"<="           reduce using rule 70
	">="           reduce using rule 70
	"=="           reduce using rule 70
	"/="           reduce using rule 70
	or             reduce using rule 70
	and            reduce using rule 70
	"+"            reduce using rule 70
	"-"            reduce using rule 70
	"*"            reduce using rule 70
	"/"            reduce using rule 70
	div            reduce using rule 70
	mod            reduce using rule 70
	"^"            reduce using rule 70
	id             reduce using rule 70


State 91

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Acc -> "[" Exp . "]"                                (rule 71)

	"]"            shift, and enter state 138
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 92

	Accs -> Accs Acc .                                  (rule 69)

	"["            reduce using rule 69
	"]"            reduce using rule 69
	")"            reduce using rule 69
	","            reduce using rule 69
	";"            reduce using rule 69
	"."            reduce using rule 69
	"="            reduce using rule 69
	if             reduce using rule 69
	while          reduce using rule 69
	for            reduce using rule 69
	to             reduce using rule 69
	with           reduce using rule 69
	return         reduce using rule 69
	new            reduce using rule 69
	end            reduce using rule 69
	free           reduce using rule 69
	repeat         reduce using rule 69
	until          reduce using rule 69
	read           reduce using rule 69
	write          reduce using rule 69
	"<"            reduce using rule 69
	">"            reduce using rule 69
	"<="           reduce using rule 69
	">="           reduce using rule 69
	"=="           reduce using rule 69
	"/="           reduce using rule 69
	or             reduce using rule 69
	and            reduce using rule 69
	"+"            reduce using rule 69
	"-"            reduce using rule 69
	"*"            reduce using rule 69
	"/"            reduce using rule 69
	div            reduce using rule 69
	mod            reduce using rule 69
	"^"            reduce using rule 69
	id             reduce using rule 69


State 93

	FuncCall -> id "(" . Fields ")"                     (rule 72)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	")"            reduce using rule 73
	","            reduce using rule 73
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 136
	Accesor        goto state 65
	Fields         goto state 137
	CFunctions     goto state 66

State 94

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Write -> write Exp . ";"                            (rule 97)

	";"            shift, and enter state 135
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 95

	Write -> write FuncCall . ";"                       (rule 98)

	";"            shift, and enter state 134


State 96

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	InstA -> read Exp . ";"                             (rule 82)

	";"            shift, and enter state 133
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 97

	Insts -> Insts . Inst                               (rule 80)
	Repeat -> repeat Insts . until Exp                  (rule 104)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	until          shift, and enter state 132
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	InstA          goto state 20
	Inst           goto state 106
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 98

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Inst -> free Exp . ";"                              (rule 89)

	";"            shift, and enter state 131
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 99

	ListId -> ListId . "," id                           (rule 66)
	InstA -> new ListId . ";"                           (rule 81)

	","            shift, and enter state 50
	";"            shift, and enter state 130


State 100

	ListId -> id .                                      (rule 65)

	","            reduce using rule 65
	";"            reduce using rule 65
	":"            reduce using rule 65


State 101

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Return -> return Exp . ";"                          (rule 95)

	";"            shift, and enter state 114
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 102

	Return -> return FuncCall . ";"                     (rule 96)

	";"            shift, and enter state 113


State 103

	For -> for "(" . id Range ")" Block                 (rule 101)

	id             shift, and enter state 112


State 104

	While -> while "(" . Exp ")" Block                  (rule 103)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 111
	Accesor        goto state 65
	CFunctions     goto state 66

State 105

	If -> if "(" . Exp ")" then Block                   (rule 99)
	If -> if "(" . Exp ")" then Block else Insts end    (rule 100)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 110
	Accesor        goto state 65
	CFunctions     goto state 66

State 106

	Insts -> Insts Inst .                               (rule 80)

	if             reduce using rule 80
	while          reduce using rule 80
	for            reduce using rule 80
	return         reduce using rule 80
	new            reduce using rule 80
	end            reduce using rule 80
	free           reduce using rule 80
	repeat         reduce using rule 80
	until          reduce using rule 80
	read           reduce using rule 80
	write          reduce using rule 80
	id             reduce using rule 80


State 107

	Main -> begin Insts end .                           (rule 3)

	"EOF"          reduce using rule 3


State 108

	InstA -> FuncCall ";" .                             (rule 83)

	if             reduce using rule 83
	while          reduce using rule 83
	for            reduce using rule 83
	return         reduce using rule 83
	new            reduce using rule 83
	begin          reduce using rule 83
	end            reduce using rule 83
	func           reduce using rule 83
	proc           reduce using rule 83
	free           reduce using rule 83
	repeat         reduce using rule 83
	until          reduce using rule 83
	read           reduce using rule 83
	write          reduce using rule 83
	struct         reduce using rule 83
	union          reduce using rule 83
	id             reduce using rule 83


State 109

	Inst -> Dec ";" .                                   (rule 86)

	if             reduce using rule 86
	while          reduce using rule 86
	for            reduce using rule 86
	return         reduce using rule 86
	new            reduce using rule 86
	end            reduce using rule 86
	free           reduce using rule 86
	repeat         reduce using rule 86
	until          reduce using rule 86
	read           reduce using rule 86
	write          reduce using rule 86
	id             reduce using rule 86


State 110

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	If -> if "(" Exp . ")" then Block                   (rule 99)
	If -> if "(" Exp . ")" then Block else Insts end    (rule 100)

	")"            shift, and enter state 192
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 111

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	While -> while "(" Exp . ")" Block                  (rule 103)

	")"            shift, and enter state 191
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 112

	For -> for "(" id . Range ")" Block                 (rule 101)

	from           shift, and enter state 190

	Range          goto state 189

State 113

	Return -> return FuncCall ";" .                     (rule 96)

	if             reduce using rule 96
	while          reduce using rule 96
	for            reduce using rule 96
	return         reduce using rule 96
	new            reduce using rule 96
	end            reduce using rule 96
	free           reduce using rule 96
	repeat         reduce using rule 96
	until          reduce using rule 96
	read           reduce using rule 96
	write          reduce using rule 96
	id             reduce using rule 96


State 114

	Return -> return Exp ";" .                          (rule 95)

	if             reduce using rule 95
	while          reduce using rule 95
	for            reduce using rule 95
	return         reduce using rule 95
	new            reduce using rule 95
	end            reduce using rule 95
	free           reduce using rule 95
	repeat         reduce using rule 95
	until          reduce using rule 95
	read           reduce using rule 95
	write          reduce using rule 95
	id             reduce using rule 95


State 115

	Exp -> Exp "<" . Exp                                (rule 49)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 188
	Accesor        goto state 65
	CFunctions     goto state 66

State 116

	Exp -> Exp ">" . Exp                                (rule 47)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 187
	Accesor        goto state 65
	CFunctions     goto state 66

State 117

	Exp -> Exp "<=" . Exp                               (rule 50)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 186
	Accesor        goto state 65
	CFunctions     goto state 66

State 118

	Exp -> Exp ">=" . Exp                               (rule 48)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 185
	Accesor        goto state 65
	CFunctions     goto state 66

State 119

	Exp -> Exp "==" . Exp                               (rule 51)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 184
	Accesor        goto state 65
	CFunctions     goto state 66

State 120

	Exp -> Exp "/=" . Exp                               (rule 52)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 183
	Accesor        goto state 65
	CFunctions     goto state 66

State 121

	Exp -> Exp or . Exp                                 (rule 54)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 182
	Accesor        goto state 65
	CFunctions     goto state 66

State 122

	Exp -> Exp and . Exp                                (rule 53)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 181
	Accesor        goto state 65
	CFunctions     goto state 66

State 123

	Exp -> Exp "+" . Exp                                (rule 40)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 180
	Accesor        goto state 65
	CFunctions     goto state 66

State 124

	Exp -> Exp "-" . Exp                                (rule 41)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 179
	Accesor        goto state 65
	CFunctions     goto state 66

State 125

	Exp -> Exp "*" . Exp                                (rule 44)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 178
	Accesor        goto state 65
	CFunctions     goto state 66

State 126

	Exp -> Exp "/" . Exp                                (rule 42)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 177
	Accesor        goto state 65
	CFunctions     goto state 66

State 127

	Exp -> Exp div . Exp                                (rule 45)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 176
	Accesor        goto state 65
	CFunctions     goto state 66

State 128

	Exp -> Exp mod . Exp                                (rule 46)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 175
	Accesor        goto state 65
	CFunctions     goto state 66

State 129

	Exp -> Exp "^" . Exp                                (rule 43)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 174
	Accesor        goto state 65
	CFunctions     goto state 66

State 130

	InstA -> new ListId ";" .                           (rule 81)

	if             reduce using rule 81
	while          reduce using rule 81
	for            reduce using rule 81
	return         reduce using rule 81
	new            reduce using rule 81
	begin          reduce using rule 81
	end            reduce using rule 81
	func           reduce using rule 81
	proc           reduce using rule 81
	free           reduce using rule 81
	repeat         reduce using rule 81
	until          reduce using rule 81
	read           reduce using rule 81
	write          reduce using rule 81
	struct         reduce using rule 81
	union          reduce using rule 81
	id             reduce using rule 81


State 131

	Inst -> free Exp ";" .                              (rule 89)

	if             reduce using rule 89
	while          reduce using rule 89
	for            reduce using rule 89
	return         reduce using rule 89
	new            reduce using rule 89
	end            reduce using rule 89
	free           reduce using rule 89
	repeat         reduce using rule 89
	until          reduce using rule 89
	read           reduce using rule 89
	write          reduce using rule 89
	id             reduce using rule 89


State 132

	Repeat -> repeat Insts until . Exp                  (rule 104)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 173
	Accesor        goto state 65
	CFunctions     goto state 66

State 133

	InstA -> read Exp ";" .                             (rule 82)

	if             reduce using rule 82
	while          reduce using rule 82
	for            reduce using rule 82
	return         reduce using rule 82
	new            reduce using rule 82
	begin          reduce using rule 82
	end            reduce using rule 82
	func           reduce using rule 82
	proc           reduce using rule 82
	free           reduce using rule 82
	repeat         reduce using rule 82
	until          reduce using rule 82
	read           reduce using rule 82
	write          reduce using rule 82
	struct         reduce using rule 82
	union          reduce using rule 82
	id             reduce using rule 82


State 134

	Write -> write FuncCall ";" .                       (rule 98)

	if             reduce using rule 98
	while          reduce using rule 98
	for            reduce using rule 98
	return         reduce using rule 98
	new            reduce using rule 98
	end            reduce using rule 98
	free           reduce using rule 98
	repeat         reduce using rule 98
	until          reduce using rule 98
	read           reduce using rule 98
	write          reduce using rule 98
	id             reduce using rule 98


State 135

	Write -> write Exp ";" .                            (rule 97)

	if             reduce using rule 97
	while          reduce using rule 97
	for            reduce using rule 97
	return         reduce using rule 97
	new            reduce using rule 97
	end            reduce using rule 97
	free           reduce using rule 97
	repeat         reduce using rule 97
	until          reduce using rule 97
	read           reduce using rule 97
	write          reduce using rule 97
	id             reduce using rule 97


State 136

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Fields -> Exp .                                     (rule 74)

	")"            reduce using rule 74
	","            reduce using rule 74
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 137

	FuncCall -> id "(" Fields . ")"                     (rule 72)
	Fields -> Fields . "," Exp                          (rule 75)

	")"            shift, and enter state 171
	","            shift, and enter state 172


State 138

	Acc -> "[" Exp "]" .                                (rule 71)

	"["            reduce using rule 71
	"]"            reduce using rule 71
	")"            reduce using rule 71
	","            reduce using rule 71
	";"            reduce using rule 71
	"."            reduce using rule 71
	"="            reduce using rule 71
	if             reduce using rule 71
	while          reduce using rule 71
	for            reduce using rule 71
	to             reduce using rule 71
	with           reduce using rule 71
	return         reduce using rule 71
	new            reduce using rule 71
	end            reduce using rule 71
	free           reduce using rule 71
	repeat         reduce using rule 71
	until          reduce using rule 71
	read           reduce using rule 71
	write          reduce using rule 71
	"<"            reduce using rule 71
	">"            reduce using rule 71
	"<="           reduce using rule 71
	">="           reduce using rule 71
	"=="           reduce using rule 71
	"/="           reduce using rule 71
	or             reduce using rule 71
	and            reduce using rule 71
	"+"            reduce using rule 71
	"-"            reduce using rule 71
	"*"            reduce using rule 71
	"/"            reduce using rule 71
	div            reduce using rule 71
	mod            reduce using rule 71
	"^"            reduce using rule 71
	id             reduce using rule 71


State 139

	Assign -> id "=" Exp ";" .                          (rule 62)

	if             reduce using rule 62
	while          reduce using rule 62
	for            reduce using rule 62
	return         reduce using rule 62
	new            reduce using rule 62
	begin          reduce using rule 62
	end            reduce using rule 62
	func           reduce using rule 62
	proc           reduce using rule 62
	free           reduce using rule 62
	repeat         reduce using rule 62
	until          reduce using rule 62
	read           reduce using rule 62
	write          reduce using rule 62
	struct         reduce using rule 62
	union          reduce using rule 62
	id             reduce using rule 62


State 140

	Declaration -> union id like Decs . end             (rule 7)
	Decs -> Decs . Dec                                  (rule 13)

	end            shift, and enter state 170
	id             shift, and enter state 100

	Dec            goto state 168
	ListId         goto state 6

State 141

	Decs -> Dec .                                       (rule 12)

	end            reduce using rule 12
	id             reduce using rule 12


State 142

	Declaration -> struct id has Decs . end             (rule 6)
	Decs -> Decs . Dec                                  (rule 13)

	end            shift, and enter state 169
	id             shift, and enter state 100

	Dec            goto state 168
	ListId         goto state 6

State 143

	Params -> Dec .                                     (rule 17)

	")"            reduce using rule 17
	","            reduce using rule 17


State 144

	Declaration -> proc id "(" Param . ")" ":" Type Insts end    (rule 5)

	")"            shift, and enter state 167


State 145

	Param -> Params .                                   (rule 16)
	Params -> Params . "," var Dec                      (rule 19)
	Params -> Params . "," Dec                          (rule 20)

	")"            reduce using rule 16
	","            shift, and enter state 166


State 146

	Params -> var . Dec                                 (rule 18)

	id             shift, and enter state 100

	Dec            goto state 165
	ListId         goto state 6

State 147

	Declaration -> func id "(" Param . ")" ":" Type Insts end    (rule 4)

	")"            shift, and enter state 164


State 148

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Exp -> "->" Exp .                                   (rule 57)

	"]"            reduce using rule 57
	")"            reduce using rule 57
	","            reduce using rule 57
	";"            reduce using rule 57
	if             reduce using rule 57
	while          reduce using rule 57
	for            reduce using rule 57
	to             reduce using rule 57
	with           reduce using rule 57
	return         reduce using rule 57
	new            reduce using rule 57
	end            reduce using rule 57
	free           reduce using rule 57
	repeat         reduce using rule 57
	until          reduce using rule 57
	read           reduce using rule 57
	write          reduce using rule 57
	"<"            reduce using rule 57
	">"            reduce using rule 57
	"<="           reduce using rule 57
	">="           reduce using rule 57
	"=="           reduce using rule 57
	"/="           reduce using rule 57
	or             reduce using rule 57
	and            reduce using rule 57
	"+"            reduce using rule 57
	"-"            reduce using rule 57
	"*"            reduce using rule 57
	"/"            reduce using rule 57
	div            reduce using rule 57
	mod            reduce using rule 57
	"^"            reduce using rule 57
	id             reduce using rule 57


State 149

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Exp -> not Exp .                                    (rule 56)

	"]"            reduce using rule 56
	")"            reduce using rule 56
	","            reduce using rule 56
	";"            reduce using rule 56
	if             reduce using rule 56
	while          reduce using rule 56
	for            reduce using rule 56
	to             reduce using rule 56
	with           reduce using rule 56
	return         reduce using rule 56
	new            reduce using rule 56
	end            reduce using rule 56
	free           reduce using rule 56
	repeat         reduce using rule 56
	until          reduce using rule 56
	read           reduce using rule 56
	write          reduce using rule 56
	"<"            reduce using rule 56
	">"            reduce using rule 56
	"<="           reduce using rule 56
	">="           reduce using rule 56
	"=="           reduce using rule 56
	"/="           reduce using rule 56
	or             reduce using rule 56
	and            reduce using rule 56
	"+"            reduce using rule 56
	"-"            reduce using rule 56
	"*"            reduce using rule 56
	"/"            reduce using rule 56
	div            reduce using rule 56
	mod            reduce using rule 56
	"^"            reduce using rule 56
	id             reduce using rule 56


State 150

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Exp -> "-" Exp .                                    (rule 55)

	"]"            reduce using rule 55
	")"            reduce using rule 55
	","            reduce using rule 55
	";"            reduce using rule 55
	if             reduce using rule 55
	while          reduce using rule 55
	for            reduce using rule 55
	to             reduce using rule 55
	with           reduce using rule 55
	return         reduce using rule 55
	new            reduce using rule 55
	end            reduce using rule 55
	free           reduce using rule 55
	repeat         reduce using rule 55
	until          reduce using rule 55
	read           reduce using rule 55
	write          reduce using rule 55
	"<"            reduce using rule 55
	">"            reduce using rule 55
	"<="           reduce using rule 55
	">="           reduce using rule 55
	"=="           reduce using rule 55
	"/="           reduce using rule 55
	or             reduce using rule 55
	and            reduce using rule 55
	"+"            reduce using rule 55
	"-"            reduce using rule 55
	"*"            reduce using rule 55
	"/"            reduce using rule 55
	div            reduce using rule 55
	mod            reduce using rule 55
	"^"            reduce using rule 55
	id             reduce using rule 55


State 151

	CFunctions -> inttoflo "(" . Exp ")"                (rule 78)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 163
	Accesor        goto state 65
	CFunctions     goto state 66

State 152

	CFunctions -> flotostr "(" . Exp ")"                (rule 77)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 162
	Accesor        goto state 65
	CFunctions     goto state 66

State 153

	CFunctions -> inttostr "(" . Exp ")"                (rule 76)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 161
	Accesor        goto state 65
	CFunctions     goto state 66

State 154

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Exp -> "(" Exp . ")"                                (rule 60)

	")"            shift, and enter state 160
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 155

	Exps -> Exps . "," Exp                              (rule 30)
	Exp -> "[" Exps . "]"                               (rule 61)

	"]"            shift, and enter state 158
	","            shift, and enter state 159


State 156

	Exps -> Exp .                                       (rule 29)
	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 29
	","            reduce using rule 29
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 157

	Assign -> Accesor "=" Exp ";" .                     (rule 64)

	if             reduce using rule 64
	while          reduce using rule 64
	for            reduce using rule 64
	return         reduce using rule 64
	new            reduce using rule 64
	begin          reduce using rule 64
	end            reduce using rule 64
	func           reduce using rule 64
	proc           reduce using rule 64
	free           reduce using rule 64
	repeat         reduce using rule 64
	until          reduce using rule 64
	read           reduce using rule 64
	write          reduce using rule 64
	struct         reduce using rule 64
	union          reduce using rule 64
	id             reduce using rule 64


State 158

	Exp -> "[" Exps "]" .                               (rule 61)

	"]"            reduce using rule 61
	")"            reduce using rule 61
	","            reduce using rule 61
	";"            reduce using rule 61
	if             reduce using rule 61
	while          reduce using rule 61
	for            reduce using rule 61
	to             reduce using rule 61
	with           reduce using rule 61
	return         reduce using rule 61
	new            reduce using rule 61
	end            reduce using rule 61
	free           reduce using rule 61
	repeat         reduce using rule 61
	until          reduce using rule 61
	read           reduce using rule 61
	write          reduce using rule 61
	"<"            reduce using rule 61
	">"            reduce using rule 61
	"<="           reduce using rule 61
	">="           reduce using rule 61
	"=="           reduce using rule 61
	"/="           reduce using rule 61
	or             reduce using rule 61
	and            reduce using rule 61
	"+"            reduce using rule 61
	"-"            reduce using rule 61
	"*"            reduce using rule 61
	"/"            reduce using rule 61
	div            reduce using rule 61
	mod            reduce using rule 61
	"^"            reduce using rule 61
	id             reduce using rule 61


State 159

	Exps -> Exps "," . Exp                              (rule 30)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 206
	Accesor        goto state 65
	CFunctions     goto state 66

State 160

	Exp -> "(" Exp ")" .                                (rule 60)

	"]"            reduce using rule 60
	")"            reduce using rule 60
	","            reduce using rule 60
	";"            reduce using rule 60
	if             reduce using rule 60
	while          reduce using rule 60
	for            reduce using rule 60
	to             reduce using rule 60
	with           reduce using rule 60
	return         reduce using rule 60
	new            reduce using rule 60
	end            reduce using rule 60
	free           reduce using rule 60
	repeat         reduce using rule 60
	until          reduce using rule 60
	read           reduce using rule 60
	write          reduce using rule 60
	"<"            reduce using rule 60
	">"            reduce using rule 60
	"<="           reduce using rule 60
	">="           reduce using rule 60
	"=="           reduce using rule 60
	"/="           reduce using rule 60
	or             reduce using rule 60
	and            reduce using rule 60
	"+"            reduce using rule 60
	"-"            reduce using rule 60
	"*"            reduce using rule 60
	"/"            reduce using rule 60
	div            reduce using rule 60
	mod            reduce using rule 60
	"^"            reduce using rule 60
	id             reduce using rule 60


State 161

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	CFunctions -> inttostr "(" Exp . ")"                (rule 76)

	")"            shift, and enter state 205
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 162

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	CFunctions -> flotostr "(" Exp . ")"                (rule 77)

	")"            shift, and enter state 204
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 163

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	CFunctions -> inttoflo "(" Exp . ")"                (rule 78)

	")"            shift, and enter state 203
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 164

	Declaration -> func id "(" Param ")" . ":" Type Insts end    (rule 4)

	":"            shift, and enter state 202


State 165

	Params -> var Dec .                                 (rule 18)

	")"            reduce using rule 18
	","            reduce using rule 18


State 166

	Params -> Params "," . var Dec                      (rule 19)
	Params -> Params "," . Dec                          (rule 20)

	var            shift, and enter state 201
	id             shift, and enter state 100

	Dec            goto state 200
	ListId         goto state 6

State 167

	Declaration -> proc id "(" Param ")" . ":" Type Insts end    (rule 5)

	":"            shift, and enter state 199


State 168

	Decs -> Decs Dec .                                  (rule 13)

	end            reduce using rule 13
	id             reduce using rule 13


State 169

	Declaration -> struct id has Decs end .             (rule 6)

	begin          reduce using rule 6
	func           reduce using rule 6
	proc           reduce using rule 6
	struct         reduce using rule 6
	union          reduce using rule 6
	id             reduce using rule 6


State 170

	Declaration -> union id like Decs end .             (rule 7)

	begin          reduce using rule 7
	func           reduce using rule 7
	proc           reduce using rule 7
	struct         reduce using rule 7
	union          reduce using rule 7
	id             reduce using rule 7


State 171

	FuncCall -> id "(" Fields ")" .                     (rule 72)

	";"            reduce using rule 72


State 172

	Fields -> Fields "," . Exp                          (rule 75)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 198
	Accesor        goto state 65
	CFunctions     goto state 66

State 173

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Repeat -> repeat Insts until Exp .                  (rule 104)

	if             reduce using rule 104
	while          reduce using rule 104
	for            reduce using rule 104
	return         reduce using rule 104
	new            reduce using rule 104
	end            reduce using rule 104
	free           reduce using rule 104
	repeat         reduce using rule 104
	until          reduce using rule 104
	read           reduce using rule 104
	write          reduce using rule 104
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 104


State 174

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp "^" Exp .                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 43
	")"            reduce using rule 43
	","            reduce using rule 43
	";"            reduce using rule 43
	if             reduce using rule 43
	while          reduce using rule 43
	for            reduce using rule 43
	to             reduce using rule 43
	with           reduce using rule 43
	return         reduce using rule 43
	new            reduce using rule 43
	end            reduce using rule 43
	free           reduce using rule 43
	repeat         reduce using rule 43
	until          reduce using rule 43
	read           reduce using rule 43
	write          reduce using rule 43
	"<"            reduce using rule 43
	">"            reduce using rule 43
	"<="           reduce using rule 43
	">="           reduce using rule 43
	"=="           reduce using rule 43
	"/="           reduce using rule 43
	or             reduce using rule 43
	and            reduce using rule 43
	"+"            reduce using rule 43
	"-"            reduce using rule 43
	"*"            reduce using rule 43
	"/"            reduce using rule 43
	div            reduce using rule 43
	mod            reduce using rule 43
	"^"            reduce using rule 43
	id             reduce using rule 43


State 175

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp mod Exp .                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 46
	")"            reduce using rule 46
	","            reduce using rule 46
	";"            reduce using rule 46
	if             reduce using rule 46
	while          reduce using rule 46
	for            reduce using rule 46
	to             reduce using rule 46
	with           reduce using rule 46
	return         reduce using rule 46
	new            reduce using rule 46
	end            reduce using rule 46
	free           reduce using rule 46
	repeat         reduce using rule 46
	until          reduce using rule 46
	read           reduce using rule 46
	write          reduce using rule 46
	"<"            reduce using rule 46
	">"            reduce using rule 46
	"<="           reduce using rule 46
	">="           reduce using rule 46
	"=="           reduce using rule 46
	"/="           reduce using rule 46
	or             reduce using rule 46
	and            reduce using rule 46
	"+"            reduce using rule 46
	"-"            reduce using rule 46
	"*"            reduce using rule 46
	"/"            reduce using rule 46
	div            reduce using rule 46
	mod            reduce using rule 46
	"^"            shift, and enter state 129
	id             reduce using rule 46


State 176

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp div Exp .                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 45
	")"            reduce using rule 45
	","            reduce using rule 45
	";"            reduce using rule 45
	if             reduce using rule 45
	while          reduce using rule 45
	for            reduce using rule 45
	to             reduce using rule 45
	with           reduce using rule 45
	return         reduce using rule 45
	new            reduce using rule 45
	end            reduce using rule 45
	free           reduce using rule 45
	repeat         reduce using rule 45
	until          reduce using rule 45
	read           reduce using rule 45
	write          reduce using rule 45
	"<"            reduce using rule 45
	">"            reduce using rule 45
	"<="           reduce using rule 45
	">="           reduce using rule 45
	"=="           reduce using rule 45
	"/="           reduce using rule 45
	or             reduce using rule 45
	and            reduce using rule 45
	"+"            reduce using rule 45
	"-"            reduce using rule 45
	"*"            reduce using rule 45
	"/"            reduce using rule 45
	div            reduce using rule 45
	mod            reduce using rule 45
	"^"            shift, and enter state 129
	id             reduce using rule 45


State 177

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp "/" Exp .                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 42
	")"            reduce using rule 42
	","            reduce using rule 42
	";"            reduce using rule 42
	if             reduce using rule 42
	while          reduce using rule 42
	for            reduce using rule 42
	to             reduce using rule 42
	with           reduce using rule 42
	return         reduce using rule 42
	new            reduce using rule 42
	end            reduce using rule 42
	free           reduce using rule 42
	repeat         reduce using rule 42
	until          reduce using rule 42
	read           reduce using rule 42
	write          reduce using rule 42
	"<"            reduce using rule 42
	">"            reduce using rule 42
	"<="           reduce using rule 42
	">="           reduce using rule 42
	"=="           reduce using rule 42
	"/="           reduce using rule 42
	or             reduce using rule 42
	and            reduce using rule 42
	"+"            reduce using rule 42
	"-"            reduce using rule 42
	"*"            reduce using rule 42
	"/"            reduce using rule 42
	div            reduce using rule 42
	mod            reduce using rule 42
	"^"            shift, and enter state 129
	id             reduce using rule 42


State 178

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp "*" Exp .                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 44
	")"            reduce using rule 44
	","            reduce using rule 44
	";"            reduce using rule 44
	if             reduce using rule 44
	while          reduce using rule 44
	for            reduce using rule 44
	to             reduce using rule 44
	with           reduce using rule 44
	return         reduce using rule 44
	new            reduce using rule 44
	end            reduce using rule 44
	free           reduce using rule 44
	repeat         reduce using rule 44
	until          reduce using rule 44
	read           reduce using rule 44
	write          reduce using rule 44
	"<"            reduce using rule 44
	">"            reduce using rule 44
	"<="           reduce using rule 44
	">="           reduce using rule 44
	"=="           reduce using rule 44
	"/="           reduce using rule 44
	or             reduce using rule 44
	and            reduce using rule 44
	"+"            reduce using rule 44
	"-"            reduce using rule 44
	"*"            reduce using rule 44
	"/"            reduce using rule 44
	div            reduce using rule 44
	mod            reduce using rule 44
	"^"            shift, and enter state 129
	id             reduce using rule 44


State 179

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp "-" Exp .                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 41
	")"            reduce using rule 41
	","            reduce using rule 41
	";"            reduce using rule 41
	if             reduce using rule 41
	while          reduce using rule 41
	for            reduce using rule 41
	to             reduce using rule 41
	with           reduce using rule 41
	return         reduce using rule 41
	new            reduce using rule 41
	end            reduce using rule 41
	free           reduce using rule 41
	repeat         reduce using rule 41
	until          reduce using rule 41
	read           reduce using rule 41
	write          reduce using rule 41
	"<"            reduce using rule 41
	">"            reduce using rule 41
	"<="           reduce using rule 41
	">="           reduce using rule 41
	"=="           reduce using rule 41
	"/="           reduce using rule 41
	or             reduce using rule 41
	and            reduce using rule 41
	"+"            reduce using rule 41
	"-"            reduce using rule 41
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 41


State 180

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp "+" Exp .                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 40
	")"            reduce using rule 40
	","            reduce using rule 40
	";"            reduce using rule 40
	if             reduce using rule 40
	while          reduce using rule 40
	for            reduce using rule 40
	to             reduce using rule 40
	with           reduce using rule 40
	return         reduce using rule 40
	new            reduce using rule 40
	end            reduce using rule 40
	free           reduce using rule 40
	repeat         reduce using rule 40
	until          reduce using rule 40
	read           reduce using rule 40
	write          reduce using rule 40
	"<"            reduce using rule 40
	">"            reduce using rule 40
	"<="           reduce using rule 40
	">="           reduce using rule 40
	"=="           reduce using rule 40
	"/="           reduce using rule 40
	or             reduce using rule 40
	and            reduce using rule 40
	"+"            reduce using rule 40
	"-"            reduce using rule 40
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 40


State 181

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp and Exp .                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 53
	")"            reduce using rule 53
	","            reduce using rule 53
	";"            reduce using rule 53
	if             reduce using rule 53
	while          reduce using rule 53
	for            reduce using rule 53
	to             reduce using rule 53
	with           reduce using rule 53
	return         reduce using rule 53
	new            reduce using rule 53
	end            reduce using rule 53
	free           reduce using rule 53
	repeat         reduce using rule 53
	until          reduce using rule 53
	read           reduce using rule 53
	write          reduce using rule 53
	"<"            reduce using rule 53
	">"            reduce using rule 53
	"<="           reduce using rule 53
	">="           reduce using rule 53
	"=="           reduce using rule 53
	"/="           reduce using rule 53
	or             reduce using rule 53
	and            reduce using rule 53
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 53


State 182

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Exp -> Exp or Exp .                                 (rule 54)

	"]"            reduce using rule 54
	")"            reduce using rule 54
	","            reduce using rule 54
	";"            reduce using rule 54
	if             reduce using rule 54
	while          reduce using rule 54
	for            reduce using rule 54
	to             reduce using rule 54
	with           reduce using rule 54
	return         reduce using rule 54
	new            reduce using rule 54
	end            reduce using rule 54
	free           reduce using rule 54
	repeat         reduce using rule 54
	until          reduce using rule 54
	read           reduce using rule 54
	write          reduce using rule 54
	"<"            reduce using rule 54
	">"            reduce using rule 54
	"<="           reduce using rule 54
	">="           reduce using rule 54
	"=="           reduce using rule 54
	"/="           reduce using rule 54
	or             reduce using rule 54
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 54


State 183

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp "/=" Exp .                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 52
	")"            reduce using rule 52
	","            reduce using rule 52
	";"            reduce using rule 52
	if             reduce using rule 52
	while          reduce using rule 52
	for            reduce using rule 52
	to             reduce using rule 52
	with           reduce using rule 52
	return         reduce using rule 52
	new            reduce using rule 52
	end            reduce using rule 52
	free           reduce using rule 52
	repeat         reduce using rule 52
	until          reduce using rule 52
	read           reduce using rule 52
	write          reduce using rule 52
	"<"            reduce using rule 52
	">"            reduce using rule 52
	"<="           reduce using rule 52
	">="           reduce using rule 52
	"=="           reduce using rule 52
	"/="           reduce using rule 52
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 52


State 184

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp "==" Exp .                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 51
	")"            reduce using rule 51
	","            reduce using rule 51
	";"            reduce using rule 51
	if             reduce using rule 51
	while          reduce using rule 51
	for            reduce using rule 51
	to             reduce using rule 51
	with           reduce using rule 51
	return         reduce using rule 51
	new            reduce using rule 51
	end            reduce using rule 51
	free           reduce using rule 51
	repeat         reduce using rule 51
	until          reduce using rule 51
	read           reduce using rule 51
	write          reduce using rule 51
	"<"            reduce using rule 51
	">"            reduce using rule 51
	"<="           reduce using rule 51
	">="           reduce using rule 51
	"=="           reduce using rule 51
	"/="           reduce using rule 51
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 51


State 185

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp ">=" Exp .                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 48
	")"            reduce using rule 48
	","            reduce using rule 48
	";"            reduce using rule 48
	if             reduce using rule 48
	while          reduce using rule 48
	for            reduce using rule 48
	to             reduce using rule 48
	with           reduce using rule 48
	return         reduce using rule 48
	new            reduce using rule 48
	end            reduce using rule 48
	free           reduce using rule 48
	repeat         reduce using rule 48
	until          reduce using rule 48
	read           reduce using rule 48
	write          reduce using rule 48
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 48


State 186

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp "<=" Exp .                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 50
	")"            reduce using rule 50
	","            reduce using rule 50
	";"            reduce using rule 50
	if             reduce using rule 50
	while          reduce using rule 50
	for            reduce using rule 50
	to             reduce using rule 50
	with           reduce using rule 50
	return         reduce using rule 50
	new            reduce using rule 50
	end            reduce using rule 50
	free           reduce using rule 50
	repeat         reduce using rule 50
	until          reduce using rule 50
	read           reduce using rule 50
	write          reduce using rule 50
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 50


State 187

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp ">" Exp .                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 47
	")"            reduce using rule 47
	","            reduce using rule 47
	";"            reduce using rule 47
	if             reduce using rule 47
	while          reduce using rule 47
	for            reduce using rule 47
	to             reduce using rule 47
	with           reduce using rule 47
	return         reduce using rule 47
	new            reduce using rule 47
	end            reduce using rule 47
	free           reduce using rule 47
	repeat         reduce using rule 47
	until          reduce using rule 47
	read           reduce using rule 47
	write          reduce using rule 47
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 47


State 188

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp "<" Exp .                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 49
	")"            reduce using rule 49
	","            reduce using rule 49
	";"            reduce using rule 49
	if             reduce using rule 49
	while          reduce using rule 49
	for            reduce using rule 49
	to             reduce using rule 49
	with           reduce using rule 49
	return         reduce using rule 49
	new            reduce using rule 49
	end            reduce using rule 49
	free           reduce using rule 49
	repeat         reduce using rule 49
	until          reduce using rule 49
	read           reduce using rule 49
	write          reduce using rule 49
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129
	id             reduce using rule 49


State 189

	For -> for "(" id Range . ")" Block                 (rule 101)

	")"            shift, and enter state 197


State 190

	Range -> from . Exp to Exp with Exp                 (rule 102)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 196
	Accesor        goto state 65
	CFunctions     goto state 66

State 191

	While -> while "(" Exp ")" . Block                  (rule 103)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 194
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28
	Block          goto state 195

State 192

	If -> if "(" Exp ")" . then Block                   (rule 99)
	If -> if "(" Exp ")" . then Block else Insts end    (rule 100)

	then           shift, and enter state 193


State 193

	If -> if "(" Exp ")" then . Block                   (rule 99)
	If -> if "(" Exp ")" then . Block else Insts end    (rule 100)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 194
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28
	Block          goto state 213

State 194

	Insts -> Insts . Inst                               (rule 80)
	Block -> Insts . end                                (rule 105)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	end            shift, and enter state 212
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	InstA          goto state 20
	Inst           goto state 106
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 195

	While -> while "(" Exp ")" Block .                  (rule 103)

	if             reduce using rule 103
	while          reduce using rule 103
	for            reduce using rule 103
	return         reduce using rule 103
	new            reduce using rule 103
	end            reduce using rule 103
	free           reduce using rule 103
	repeat         reduce using rule 103
	until          reduce using rule 103
	read           reduce using rule 103
	write          reduce using rule 103
	id             reduce using rule 103


State 196

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Range -> from Exp . to Exp with Exp                 (rule 102)

	to             shift, and enter state 211
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 197

	For -> for "(" id Range ")" . Block                 (rule 101)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 194
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28
	Block          goto state 210

State 198

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Fields -> Fields "," Exp .                          (rule 75)

	")"            reduce using rule 75
	","            reduce using rule 75
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 199

	Declaration -> proc id "(" Param ")" ":" . Type Insts end    (rule 5)

	intT           shift, and enter state 56
	boolT          shift, and enter state 57
	floatT         shift, and enter state 58
	charT          shift, and enter state 59
	voidT          shift, and enter state 60
	stringT        shift, and enter state 61

	Type           goto state 209

State 200

	Params -> Params "," Dec .                          (rule 20)

	")"            reduce using rule 20
	","            reduce using rule 20


State 201

	Params -> Params "," var . Dec                      (rule 19)

	id             shift, and enter state 100

	Dec            goto state 208
	ListId         goto state 6

State 202

	Declaration -> func id "(" Param ")" ":" . Type Insts end    (rule 4)

	intT           shift, and enter state 56
	boolT          shift, and enter state 57
	floatT         shift, and enter state 58
	charT          shift, and enter state 59
	voidT          shift, and enter state 60
	stringT        shift, and enter state 61

	Type           goto state 207

State 203

	CFunctions -> inttoflo "(" Exp ")" .                (rule 78)

	"]"            reduce using rule 78
	")"            reduce using rule 78
	","            reduce using rule 78
	";"            reduce using rule 78
	if             reduce using rule 78
	while          reduce using rule 78
	for            reduce using rule 78
	to             reduce using rule 78
	with           reduce using rule 78
	return         reduce using rule 78
	new            reduce using rule 78
	end            reduce using rule 78
	free           reduce using rule 78
	repeat         reduce using rule 78
	until          reduce using rule 78
	read           reduce using rule 78
	write          reduce using rule 78
	"<"            reduce using rule 78
	">"            reduce using rule 78
	"<="           reduce using rule 78
	">="           reduce using rule 78
	"=="           reduce using rule 78
	"/="           reduce using rule 78
	or             reduce using rule 78
	and            reduce using rule 78
	"+"            reduce using rule 78
	"-"            reduce using rule 78
	"*"            reduce using rule 78
	"/"            reduce using rule 78
	div            reduce using rule 78
	mod            reduce using rule 78
	"^"            reduce using rule 78
	id             reduce using rule 78


State 204

	CFunctions -> flotostr "(" Exp ")" .                (rule 77)

	"]"            reduce using rule 77
	")"            reduce using rule 77
	","            reduce using rule 77
	";"            reduce using rule 77
	if             reduce using rule 77
	while          reduce using rule 77
	for            reduce using rule 77
	to             reduce using rule 77
	with           reduce using rule 77
	return         reduce using rule 77
	new            reduce using rule 77
	end            reduce using rule 77
	free           reduce using rule 77
	repeat         reduce using rule 77
	until          reduce using rule 77
	read           reduce using rule 77
	write          reduce using rule 77
	"<"            reduce using rule 77
	">"            reduce using rule 77
	"<="           reduce using rule 77
	">="           reduce using rule 77
	"=="           reduce using rule 77
	"/="           reduce using rule 77
	or             reduce using rule 77
	and            reduce using rule 77
	"+"            reduce using rule 77
	"-"            reduce using rule 77
	"*"            reduce using rule 77
	"/"            reduce using rule 77
	div            reduce using rule 77
	mod            reduce using rule 77
	"^"            reduce using rule 77
	id             reduce using rule 77


State 205

	CFunctions -> inttostr "(" Exp ")" .                (rule 76)

	"]"            reduce using rule 76
	")"            reduce using rule 76
	","            reduce using rule 76
	";"            reduce using rule 76
	if             reduce using rule 76
	while          reduce using rule 76
	for            reduce using rule 76
	to             reduce using rule 76
	with           reduce using rule 76
	return         reduce using rule 76
	new            reduce using rule 76
	end            reduce using rule 76
	free           reduce using rule 76
	repeat         reduce using rule 76
	until          reduce using rule 76
	read           reduce using rule 76
	write          reduce using rule 76
	"<"            reduce using rule 76
	">"            reduce using rule 76
	"<="           reduce using rule 76
	">="           reduce using rule 76
	"=="           reduce using rule 76
	"/="           reduce using rule 76
	or             reduce using rule 76
	and            reduce using rule 76
	"+"            reduce using rule 76
	"-"            reduce using rule 76
	"*"            reduce using rule 76
	"/"            reduce using rule 76
	div            reduce using rule 76
	mod            reduce using rule 76
	"^"            reduce using rule 76
	id             reduce using rule 76


State 206

	Exps -> Exps "," Exp .                              (rule 30)
	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)

	"]"            reduce using rule 30
	","            reduce using rule 30
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 207

	Declaration -> func id "(" Param ")" ":" Type . Insts end    (rule 4)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 217
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 208

	Params -> Params "," var Dec .                      (rule 19)

	")"            reduce using rule 19
	","            reduce using rule 19


State 209

	Declaration -> proc id "(" Param ")" ":" Type . Insts end    (rule 5)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 216
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 210

	For -> for "(" id Range ")" Block .                 (rule 101)

	if             reduce using rule 101
	while          reduce using rule 101
	for            reduce using rule 101
	return         reduce using rule 101
	new            reduce using rule 101
	end            reduce using rule 101
	free           reduce using rule 101
	repeat         reduce using rule 101
	until          reduce using rule 101
	read           reduce using rule 101
	write          reduce using rule 101
	id             reduce using rule 101


State 211

	Range -> from Exp to . Exp with Exp                 (rule 102)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 215
	Accesor        goto state 65
	CFunctions     goto state 66

State 212

	Block -> Insts end .                                (rule 105)

	if             reduce using rule 105
	else           reduce using rule 105
	while          reduce using rule 105
	for            reduce using rule 105
	return         reduce using rule 105
	new            reduce using rule 105
	end            reduce using rule 105
	free           reduce using rule 105
	repeat         reduce using rule 105
	until          reduce using rule 105
	read           reduce using rule 105
	write          reduce using rule 105
	id             reduce using rule 105


State 213

	If -> if "(" Exp ")" then Block .                   (rule 99)
	If -> if "(" Exp ")" then Block . else Insts end    (rule 100)

	if             reduce using rule 99
	else           shift, and enter state 214
	while          reduce using rule 99
	for            reduce using rule 99
	return         reduce using rule 99
	new            reduce using rule 99
	end            reduce using rule 99
	free           reduce using rule 99
	repeat         reduce using rule 99
	until          reduce using rule 99
	read           reduce using rule 99
	write          reduce using rule 99
	id             reduce using rule 99


State 214

	If -> if "(" Exp ")" then Block else . Insts end    (rule 100)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	Insts          goto state 221
	InstA          goto state 20
	Inst           goto state 21
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 215

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Range -> from Exp to Exp . with Exp                 (rule 102)

	with           shift, and enter state 220
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


State 216

	Declaration -> proc id "(" Param ")" ":" Type Insts . end    (rule 5)
	Insts -> Insts . Inst                               (rule 80)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	end            shift, and enter state 219
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	InstA          goto state 20
	Inst           goto state 106
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 217

	Declaration -> func id "(" Param ")" ":" Type Insts . end    (rule 4)
	Insts -> Insts . Inst                               (rule 80)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	end            shift, and enter state 218
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	InstA          goto state 20
	Inst           goto state 106
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 218

	Declaration -> func id "(" Param ")" ":" Type Insts end .    (rule 4)

	begin          reduce using rule 4
	func           reduce using rule 4
	proc           reduce using rule 4
	struct         reduce using rule 4
	union          reduce using rule 4
	id             reduce using rule 4


State 219

	Declaration -> proc id "(" Param ")" ":" Type Insts end .    (rule 5)

	begin          reduce using rule 5
	func           reduce using rule 5
	proc           reduce using rule 5
	struct         reduce using rule 5
	union          reduce using rule 5
	id             reduce using rule 5


State 220

	Range -> from Exp to Exp with . Exp                 (rule 102)

	"["            shift, and enter state 67
	"("            shift, and enter state 68
	inttostr       shift, and enter state 69
	flotostr       shift, and enter state 70
	inttoflo       shift, and enter state 71
	true           shift, and enter state 72
	false          shift, and enter state 73
	null           shift, and enter state 74
	"-"            shift, and enter state 75
	not            shift, and enter state 76
	"->"           shift, and enter state 77
	int            shift, and enter state 78
	float          shift, and enter state 79
	char           shift, and enter state 80
	string         shift, and enter state 81
	id             shift, and enter state 82

	Values         goto state 63
	Exp            goto state 223
	Accesor        goto state 65
	CFunctions     goto state 66

State 221

	Insts -> Insts . Inst                               (rule 80)
	If -> if "(" Exp ")" then Block else Insts . end    (rule 100)

	if             shift, and enter state 29
	while          shift, and enter state 30
	for            shift, and enter state 31
	return         shift, and enter state 32
	new            shift, and enter state 33
	end            shift, and enter state 222
	free           shift, and enter state 34
	repeat         shift, and enter state 35
	read           shift, and enter state 36
	write          shift, and enter state 37
	id             shift, and enter state 38

	Dec            goto state 16
	Assign         goto state 17
	ListId         goto state 6
	Accesor        goto state 7
	FuncCall       goto state 18
	InstA          goto state 20
	Inst           goto state 106
	InstB          goto state 22
	Return         goto state 23
	Write          goto state 24
	If             goto state 25
	For            goto state 26
	While          goto state 27
	Repeat         goto state 28

State 222

	If -> if "(" Exp ")" then Block else Insts end .    (rule 100)

	if             reduce using rule 100
	while          reduce using rule 100
	for            reduce using rule 100
	return         reduce using rule 100
	new            reduce using rule 100
	end            reduce using rule 100
	free           reduce using rule 100
	repeat         reduce using rule 100
	until          reduce using rule 100
	read           reduce using rule 100
	write          reduce using rule 100
	id             reduce using rule 100


State 223

	Exp -> Exp . "+" Exp                                (rule 40)
	Exp -> Exp . "-" Exp                                (rule 41)
	Exp -> Exp . "/" Exp                                (rule 42)
	Exp -> Exp . "^" Exp                                (rule 43)
	Exp -> Exp . "*" Exp                                (rule 44)
	Exp -> Exp . div Exp                                (rule 45)
	Exp -> Exp . mod Exp                                (rule 46)
	Exp -> Exp . ">" Exp                                (rule 47)
	Exp -> Exp . ">=" Exp                               (rule 48)
	Exp -> Exp . "<" Exp                                (rule 49)
	Exp -> Exp . "<=" Exp                               (rule 50)
	Exp -> Exp . "==" Exp                               (rule 51)
	Exp -> Exp . "/=" Exp                               (rule 52)
	Exp -> Exp . and Exp                                (rule 53)
	Exp -> Exp . or Exp                                 (rule 54)
	Range -> from Exp to Exp with Exp .                 (rule 102)

	")"            reduce using rule 102
	"<"            shift, and enter state 115
	">"            shift, and enter state 116
	"<="           shift, and enter state 117
	">="           shift, and enter state 118
	"=="           shift, and enter state 119
	"/="           shift, and enter state 120
	or             shift, and enter state 121
	and            shift, and enter state 122
	"+"            shift, and enter state 123
	"-"            shift, and enter state 124
	"*"            shift, and enter state 125
	"/"            shift, and enter state 126
	div            shift, and enter state 127
	mod            shift, and enter state 128
	"^"            shift, and enter state 129


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 106
Number of terminals: 71
Number of non-terminals: 34
Number of states: 224
